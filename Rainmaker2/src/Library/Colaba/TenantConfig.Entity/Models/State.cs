// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace TenantConfig.Entity.Models
{
    using System;
    using System.Collections.Generic;

    // State
    
    public partial class State : URF.Core.EF.Trackable.Entity
    {
        public int Id { get; set; } // Id (Primary key)
        public int CountryId { get; set; } // CountryId
        public string Name { get; set; } // Name (length: 150)
        public string Abbreviation { get; set; } // Abbreviation (length: 50)
        public bool IsActive { get; set; } // IsActive
        public bool IsLicenseActive { get; set; } // IsLicenseActive
        public int? ModifiedBy { get; set; } // ModifiedBy
        public System.DateTime? ModifiedOnUtc { get; set; } // ModifiedOnUtc
        public int? CreatedBy { get; set; } // CreatedBy
        public System.DateTime? CreatedOnUtc { get; set; } // CreatedOnUtc

        // Reverse navigation

        /// <summary>
        /// Child AddressInfoes where [AddressInfo].[StateId] point to this entity (FK_AddressInfo_State_Id)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AddressInfo> AddressInfoes { get; set; } // AddressInfo.FK_AddressInfo_State_Id
        /// <summary>
        /// Child Cities where [City].[StateId] point to this entity (FK_City_State)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<City> Cities { get; set; } // City.FK_City_State
        /// <summary>
        /// Child Counties where [County].[StateId] point to this entity (FK_County_State)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<County> Counties { get; set; } // County.FK_County_State

        // Foreign keys

        /// <summary>
        /// Parent Country pointed by [State].([CountryId]) (FK_State_Country)
        /// </summary>
        public virtual Country Country { get; set; } // FK_State_Country

        public State()
        {
            IsActive = true;
            IsLicenseActive = true;
            AddressInfoes = new System.Collections.Generic.HashSet<AddressInfo>();
            Cities = new System.Collections.Generic.HashSet<City>();
            Counties = new System.Collections.Generic.HashSet<County>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
