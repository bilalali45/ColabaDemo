// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace TenantConfig.Data
{
    using Microsoft.EntityFrameworkCore;
    using TenantConfig.Data.Mapping;
    using TenantConfig.Entity.Models;


    
    public partial class TenantConfigContext : DbContext
    {
        //public virtual DbSet<Activity> Activities { get; set; } // Activity
        //public virtual DbSet<ActivityTenantBinder> ActivityTenantBinders { get; set; } // ActivityTenantBinder
        //public virtual DbSet<ActivityType> ActivityTypes { get; set; } // ActivityType
        //public virtual DbSet<AddressInfo> AddressInfoes { get; set; } // AddressInfo
        //public virtual DbSet<Branch> Branches { get; set; } // Branch
        //public virtual DbSet<BranchEmailBinder> BranchEmailBinders { get; set; } // BranchEmailBinder
        //public virtual DbSet<BranchLoanOfficerBinder> BranchLoanOfficerBinders { get; set; } // BranchLoanOfficerBinder
        //public virtual DbSet<BranchPhoneBinder> BranchPhoneBinders { get; set; } // BranchPhoneBinder
        //public virtual DbSet<City> Cities { get; set; } // City
        //public virtual DbSet<CompanyPhoneInfo> CompanyPhoneInfoes { get; set; } // CompanyPhoneInfo
        //public virtual DbSet<Contact> Contacts { get; set; } // Contact
        //public virtual DbSet<ContactEmailInfo> ContactEmailInfoes { get; set; } // ContactEmailInfo
        //public virtual DbSet<ContactPhoneInfo> ContactPhoneInfoes { get; set; } // ContactPhoneInfo
        //public virtual DbSet<Country> Countries { get; set; } // Country
        //public virtual DbSet<County> Counties { get; set; } // County
        //public virtual DbSet<CountyType> CountyTypes { get; set; } // CountyType
        //public virtual DbSet<Customer> Customers { get; set; } // Customer
        //public virtual DbSet<Designation> Designations { get; set; } // Designation
        //public virtual DbSet<EmailAccount> EmailAccounts { get; set; } // EmailAccount
        //public virtual DbSet<Employee> Employees { get; set; } // Employee
        //public virtual DbSet<EmployeeEmailBinder> EmployeeEmailBinders { get; set; } // EmployeeEmailBinder
        //public virtual DbSet<EmployeePhoneBinder> EmployeePhoneBinders { get; set; } // EmployeePhoneBinder
        //public virtual DbSet<HierarchyLevel> HierarchyLevels { get; set; } // HierarchyLevel
        //public virtual DbSet<Setting> Settings { get; set; } // Setting
        //public virtual DbSet<State> States { get; set; } // State
        //public virtual DbSet<StringResource> StringResources { get; set; } // StringResource
        //public virtual DbSet<Template> Templates { get; set; } // Template
        //public virtual DbSet<Tenant> Tenants { get; set; } // Tenant
        //public virtual DbSet<TenantUrl> TenantUrls { get; set; } // TenantUrl
        //public virtual DbSet<TermsCondition> TermsConditions { get; set; } // TermsCondition
        //public virtual DbSet<TermsConditionType> TermsConditionTypes { get; set; } // TermsConditionType
        //public virtual DbSet<TwoFaConfig> TwoFaConfigs { get; set; } // TwoFAConfig
        //public virtual DbSet<TwoFaMode> TwoFaModes { get; set; } // TwoFAModes
        //public virtual DbSet<WorkQueue> WorkQueues { get; set; } // WorkQueue
        //public virtual DbSet<WorkQueueToken> WorkQueueTokens { get; set; } // WorkQueueToken

		public TenantConfigContext(DbContextOptions<TenantConfigContext> options)
            : base(options)
        {
		            InitializePartial();
        }
		
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new ActivityMap());
            modelBuilder.ApplyConfiguration(new ActivityTenantBinderMap());
            modelBuilder.ApplyConfiguration(new ActivityTypeMap());
            modelBuilder.ApplyConfiguration(new AddressInfoMap());
            modelBuilder.ApplyConfiguration(new BranchMap());
            modelBuilder.ApplyConfiguration(new BranchEmailBinderMap());
            modelBuilder.ApplyConfiguration(new BranchLoanOfficerBinderMap());
            modelBuilder.ApplyConfiguration(new BranchPhoneBinderMap());
            modelBuilder.ApplyConfiguration(new CityMap());
            modelBuilder.ApplyConfiguration(new CompanyPhoneInfoMap());
            modelBuilder.ApplyConfiguration(new ContactMap());
            modelBuilder.ApplyConfiguration(new ContactEmailInfoMap());
            modelBuilder.ApplyConfiguration(new ContactPhoneInfoMap());
            modelBuilder.ApplyConfiguration(new CountryMap());
            modelBuilder.ApplyConfiguration(new CountyMap());
            modelBuilder.ApplyConfiguration(new CountyTypeMap());
            modelBuilder.ApplyConfiguration(new CustomerMap());
            modelBuilder.ApplyConfiguration(new DesignationMap());
            modelBuilder.ApplyConfiguration(new EmailAccountMap());
            modelBuilder.ApplyConfiguration(new EmployeeMap());
            modelBuilder.ApplyConfiguration(new EmployeeEmailBinderMap());
            modelBuilder.ApplyConfiguration(new EmployeePhoneBinderMap());
            modelBuilder.ApplyConfiguration(new HierarchyLevelMap());
            modelBuilder.ApplyConfiguration(new SettingMap());
            modelBuilder.ApplyConfiguration(new StateMap());
            modelBuilder.ApplyConfiguration(new StringResourceMap());
            modelBuilder.ApplyConfiguration(new TemplateMap());
            modelBuilder.ApplyConfiguration(new TenantMap());
            modelBuilder.ApplyConfiguration(new TenantUrlMap());
            modelBuilder.ApplyConfiguration(new TermsConditionMap());
            modelBuilder.ApplyConfiguration(new TermsConditionTypeMap());
            modelBuilder.ApplyConfiguration(new TwoFaConfigMap());
            modelBuilder.ApplyConfiguration(new TwoFaModeMap());
            modelBuilder.ApplyConfiguration(new WorkQueueMap());
            modelBuilder.ApplyConfiguration(new WorkQueueTokenMap());

            OnModelCreatingPartial(modelBuilder);
        }


        partial void InitializePartial();
        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
// </auto-generated>
