// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace TenantConfig.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using TenantConfig.Entity.Models;

    // WorkQueue
    
    public partial class WorkQueueMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<WorkQueue>
    {
        public void Configure(EntityTypeBuilder<WorkQueue> builder)
        {
            builder.ToTable("WorkQueue", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ActivityId).HasColumnName(@"ActivityId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BranchId).HasColumnName(@"BranchId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.ScheduleDate).HasColumnName(@"ScheduleDate").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.Priority).HasColumnName(@"Priority").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Retries).HasColumnName(@"Retries").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RetryCount).HasColumnName(@"RetryCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("varchar").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Response).HasColumnName(@"Response").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.To).HasColumnName(@"To").HasColumnType("varchar").IsRequired(false).IsUnicode(false).HasMaxLength(1000);
            builder.Property(x => x.Cc).HasColumnName(@"CC").HasColumnType("varchar").IsRequired(false).IsUnicode(false).HasMaxLength(1000);
            builder.Property(x => x.Bcc).HasColumnName(@"BCC").HasColumnType("varchar").IsRequired(false).IsUnicode(false).HasMaxLength(1000);
            builder.Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.MessageId).HasColumnName(@"MessageId").HasColumnType("varchar").IsRequired(false).IsUnicode(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.Activity).WithMany(b => b.WorkQueues).HasForeignKey(c => c.ActivityId).OnDelete(DeleteBehavior.SetNull); // FK_WorkQueue_Activity_Id
            builder.HasOne(a => a.Branch).WithMany(b => b.WorkQueues).HasForeignKey(c => c.BranchId).OnDelete(DeleteBehavior.SetNull); // FK_WorkQueue_Branch_Id
            builder.HasOne(a => a.Tenant).WithMany(b => b.WorkQueues).HasForeignKey(c => c.TenantId).OnDelete(DeleteBehavior.SetNull); // FK_WorkQueue_Tenant_Id
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
