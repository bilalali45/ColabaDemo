// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace TenantConfig.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using TenantConfig.Entity.Models;

    // TwoFAConfig
    
    public partial class TwoFaConfigMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<TwoFaConfig>
    {
        public void Configure(EntityTypeBuilder<TwoFaConfig> builder)
        {
            builder.ToTable("TwoFAConfig", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired();
            builder.Property(x => x.BorrowerTwoFaModeId).HasColumnName(@"BorrowerTwoFAModeId").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.McuTwoFaModeId).HasColumnName(@"MCUTwoFAModeId").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.McuTwoFaMobileModeId).HasColumnName(@"MCUTwoFAMobileModeId").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.BranchId).HasColumnName(@"BranchId").HasColumnType("int").IsRequired();
            builder.Property(x => x.TwilioVerifyServiceId).HasColumnName(@"TwilioVerifyServiceId").HasColumnType("varchar").IsRequired(false).IsUnicode(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.BorrowerTwoFaMode).WithMany(b => b.TwoFaConfigs_BorrowerTwoFaModeId).HasForeignKey(c => c.BorrowerTwoFaModeId).OnDelete(DeleteBehavior.SetNull); // FK_TwoFAConfig_TwoFAModes_Id_Borrower
            builder.HasOne(a => a.Branch).WithMany(b => b.TwoFaConfigs).HasForeignKey(c => c.BranchId).OnDelete(DeleteBehavior.SetNull); // FK_TwoFAConfig_Branch_Id
            builder.HasOne(a => a.McuTwoFaMobileMode).WithMany(b => b.TwoFaConfigs_McuTwoFaMobileModeId).HasForeignKey(c => c.McuTwoFaMobileModeId).OnDelete(DeleteBehavior.SetNull); // FK_TwoFAConfig_TwoFAModes
            builder.HasOne(a => a.McuTwoFaMode).WithMany(b => b.TwoFaConfigs_McuTwoFaModeId).HasForeignKey(c => c.McuTwoFaModeId).OnDelete(DeleteBehavior.SetNull); // FK_TwoFAConfig_TwoFAModes_Id_MCU
            builder.HasOne(a => a.Tenant).WithMany(b => b.TwoFaConfigs).HasForeignKey(c => c.TenantId).OnDelete(DeleteBehavior.SetNull); // FK_TwoFAConfig_Tenant
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
