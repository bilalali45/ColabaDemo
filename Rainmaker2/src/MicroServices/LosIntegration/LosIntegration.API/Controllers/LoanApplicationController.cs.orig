using System;
using System.Threading.Tasks;
using LosIntegration.API.Enums;
using LosIntegration.Model.Model.ServiceRequestModels.RainMaker;
using LosIntegration.Model.Model.ServiceResponseModels;
using LosIntegration.Model.Model.ServiceResponseModels.ByteWebConnector;
using LosIntegration.Service.InternalServices;
using LosIntegration.Service.InternalServices.Rainmaker;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Serilog;
using Extensions.ExtensionClasses;
using Elasticsearch.Net;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace LosIntegration.API.Controllers
{
    [Route(template: "api/LosIntegration/[controller]")]
    [ApiController]
<<<<<<< HEAD
   // [Authorize(Roles = "MCU,Customer")]
    public class LoanApplicationController : BaseApiController<LoanApplicationController>
=======
    // [Authorize(Roles = "MCU,Customer")]
    public class LoanApplicationController : ControllerBase
>>>>>>> Byte_File_Sync_Refactoring
    {
        #region Constructor

        public LoanApplicationController(IRainmakerService rainmakerService,
                                         IByteWebConnectorService byteWebConnectorService,
                                         ILoanApplicationService loanApplicationService,
                                         ILogger<LoanApplicationController> logger,
                                         ILoanRequestService loanRequestService,
                                         IThirdPartyCodeService thirdPartyCodeService,
                                         IMilestoneService milestoneService) : base(logger)
        {
            _rainmakerService = rainmakerService;
            _byteWebConnectorService = byteWebConnectorService;
            _loanApplicationService = loanApplicationService;
            _logger = logger;
            _loanRequestService = loanRequestService;
            _thirdPartyCodeService = thirdPartyCodeService;
            this._milestoneService = milestoneService;
        }

        #endregion

        #region Action Methods

        [Route(template: "[action]")]
        [HttpPost]
        public async Task<ApiResponse<LoanFileInfo>> SendLoanApplicationToExternalOriginator([FromQuery] int loanApplicationId)
        {

            var loanApplication = _loanApplicationService.GetLoanApplicationWithDetails(loanApplicationId: loanApplicationId,
                                                                                        includes:
                                                                                                  LoanApplicationService.RelatedEntities.Borrower_EmploymentInfoes_AddressInfo |
                                                                                                  LoanApplicationService.RelatedEntities.Borrower_EmploymentInfoes_OtherEmploymentIncomes |
                                                                                                  LoanApplicationService.RelatedEntities.Borrower_BorrowerResidences_LoanAddress |
                                                                                                  LoanApplicationService.RelatedEntities.Borrower_BorrowerAccount_AccountType |
                                                                                                  LoanApplicationService.RelatedEntities.Borrower_LoanContact_Ethnicity |
                                                                                                  LoanApplicationService.RelatedEntities.Borrower_LoanContact_Race |
                                                                                                  LoanApplicationService.RelatedEntities.Borrower_LoanContact_Gender |
                                                                                                  LoanApplicationService.RelatedEntities.Borrower_OtherIncomes_IncomeType |
                                                                                                  LoanApplicationService.RelatedEntities.Borrower_Liability |
                                                                                                  LoanApplicationService.RelatedEntities.Opportunity_Employee_UserProfile |
                                                                                                  LoanApplicationService.RelatedEntities.Borrower_PropertyInfo_AddressInfo |
                                                                                                  LoanApplicationService.RelatedEntities.PropertyInfo_AddressInfo |
                                                                                                  LoanApplicationService.RelatedEntities.PropertyInfo_MortgageOnProperties |
                                                                                                  LoanApplicationService.RelatedEntities.Opportunity_Employee_Contact |
                                                                                                  LoanApplicationService.RelatedEntities.Opportunity_Employee_CompanyPhoneInfo |
                                                                                                  LoanApplicationService.RelatedEntities.Opportunity_Employee_EmailAccount |
                                                                                                  LoanApplicationService.RelatedEntities.BusinessUnit_LeadSource |
                                                                                                  LoanApplicationService.RelatedEntities.LoanGoal |
                                                                                                  LoanApplicationService.RelatedEntities.PropertyInfo_PropertyTaxEscrows |
                                                                                                  LoanApplicationService.RelatedEntities.Borrower_BorrowerQuestionResponses_Question |
                                                                                                  LoanApplicationService.RelatedEntities.Borrower_BorrowerQuestionResponses_QuestionResponse


                                                                                                  );
            var loanRequest = _loanRequestService.GetLoanRequestWithDetails(loanApplicationId: loanApplicationId,
                                                                                       null);
            var byteProCodeList = _thirdPartyCodeService.GetRefIdByThirdPartyId((int)ThirdParty.BytePro);

            if (loanApplication != null)
            {
                var sendLoanApplicationCallResponse = await _byteWebConnectorService.SendLoanApplication(loanApplication: loanApplication,
                                                                                             loanRequest: loanRequest, byteProCodeList: byteProCodeList);

                var byteResponseFile = sendLoanApplicationCallResponse.ResponseObject.Data;
                loanApplication.ByteLoanNumber = byteResponseFile.FileDataId.ToString();
                loanApplication.ByteFileName = byteResponseFile.FileName;
                loanApplication.BytePostDateUtc = DateTime.UtcNow;
                //loanApplication.EncompassNumber = loanResponse?.FileDataID.ToString();
                var updateLoanApplicationRequest = new UpdateLoanApplicationRequest()
                {
                    Id = loanApplication.Id,
                    BytePostDateUtc = DateTime.UtcNow,
                    ByteLoanNumber = byteResponseFile.FileDataId.ToString(),
                    ByteFileName = byteResponseFile.FileName,
                };
                var updateLoanApplicationResponse = _loanApplicationService.UpdateLoanApplication(updateLoanApplicationRequest);
                return sendLoanApplicationCallResponse.ResponseObject;
                //_loanApplicationService
            }
<<<<<<< HEAD
            return new ApiResponse<LoanFileInfo>{ Code = ApiResponseStatus.Fail };
        }


        [Route(template: "[action]")]
        [HttpGet]
        public async Task<IActionResult> UpdateLoanStatusFromByte([FromQuery] int loanApplicationId)
        {
            short byteProLoanStatusId = 0;
            var loanApplicationDetail = _loanApplicationService.GetLoanApplicationWithDetails(loanApplicationId: loanApplicationId);
            if (loanApplicationDetail == null)
            {
                return NotFound();
            }
            else
            {
                byteProLoanStatusId = await this._byteWebConnectorService.GetLoanStatusAsync(loanApplicationDetail.ByteLoanNumber);
                if(byteProLoanStatusId <= 0)
                {
                    base._logger.LogWarning($"Loan status return from LOS is not valid. Loan Status : {byteProLoanStatusId}");
                    return BadRequest();
                }
                else
                {
                    //var loanApplication = _loanApplicationService.GetLoanApplicationWithDetails(loanApplicationId);
                    var updateRespose = await this.UpdateRainmakerLoanStatus(loanApplicationId, loanApplicationDetail.ByteFileName, byteProLoanStatusId);
                    return updateRespose;
                }
            }
        }

        private async Task<IActionResult> UpdateRainmakerLoanStatus(int loanApplicationId, string byteFileName, short losStatusId)
        {
            return await this._milestoneService.SyncRainmakerLoanStatusFromByte(base.TenantId, loanApplicationId, losStatusId, byteFileName);
=======
            return new ApiResponse<LoanFileInfo> { Code = ApiResponseStatus.Fail };
>>>>>>> Byte_File_Sync_Refactoring
        }

        #endregion

        #region Private Fields

        private readonly IRainmakerService _rainmakerService;
        private readonly IByteWebConnectorService _byteWebConnectorService;
        private readonly ILoanApplicationService _loanApplicationService;
        private readonly ILogger<LoanApplicationController> _logger;
        private readonly ILoanRequestService _loanRequestService;
        private readonly IThirdPartyCodeService _thirdPartyCodeService;
        private readonly IMilestoneService _milestoneService;

        #endregion
    }
}