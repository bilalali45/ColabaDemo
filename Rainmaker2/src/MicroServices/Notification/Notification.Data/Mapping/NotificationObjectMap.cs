// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Notification.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using Notification.Entity.Models;

    // NotificationObject

    public partial class NotificationObjectMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<NotificationObject>
    {
        public void Configure(EntityTypeBuilder<NotificationObject> builder)
        {
            builder.ToTable("NotificationObject", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.NotificationTypeId).HasColumnName(@"NotificationTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EntityId).HasColumnName(@"EntityId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomTextJson).HasColumnName(@"CustomTextJSON").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired();
            builder.Property(x => x.StatusId).HasColumnName(@"StatusId").HasColumnType("tinyint").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.NotificationType).WithMany(b => b.NotificationObjects).HasForeignKey(c => c.NotificationTypeId).OnDelete(DeleteBehavior.SetNull); // FK_NotificationObject_NotificationType_Id
            builder.HasOne(a => a.StatusListEnum).WithMany(b => b.NotificationObjects).HasForeignKey(c => c.StatusId).OnDelete(DeleteBehavior.SetNull); // FK_NotificationObject_StatusListEnum_Id
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
