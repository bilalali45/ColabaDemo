// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Notification.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using Notification.Entity.Models;

    // NotificationTemplate

    public partial class NotificationTemplateMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<NotificationTemplate>
    {
        public void Configure(EntityTypeBuilder<NotificationTemplate> builder)
        {
            builder.ToTable("NotificationTemplate", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.TemplateJson).HasColumnName(@"TemplateJSON").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.NotificationMediumId).HasColumnName(@"NotificationMediumId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MediumMetaDataJson).HasColumnName(@"MediumMetaDataJSON").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.NotificationTypeId).HasColumnName(@"NotificationTypeId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.NotificationMedium).WithMany(b => b.NotificationTemplates).HasForeignKey(c => c.NotificationMediumId).OnDelete(DeleteBehavior.SetNull); // FK_NotificationTemplate_NotificationMedium_Id
            builder.HasOne(a => a.NotificationType).WithMany(b => b.NotificationTemplates).HasForeignKey(c => c.NotificationTypeId).OnDelete(DeleteBehavior.SetNull); // FK_NotificationTemplate_NotificationType_Id
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
