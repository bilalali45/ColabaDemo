// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace LoanApplicationDb.Data.Mapping
{
    using LoanApplicationDb.Entity.Models;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;

    // BorrowerResidence
    
    public partial class BorrowerResidenceMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<BorrowerResidence>
    {
        public void Configure(EntityTypeBuilder<BorrowerResidence> builder)
        {
            builder.ToTable("BorrowerResidence", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.LoanAddressId).HasColumnName(@"LoanAddressId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BorrowerId).HasColumnName(@"BorrowerId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OwnershipTypeId).HasColumnName(@"OwnershipTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TypeId).HasColumnName(@"TypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MonthlyRent).HasColumnName(@"MonthlyRent").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.AccountInNameOf).HasColumnName(@"AccountInNameOf").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.LandLordContactId).HasColumnName(@"LandLordContactId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LandLordAddressId).HasColumnName(@"LandLordAddressId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LandLordComments).HasColumnName(@"LandLordComments").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(2500);
            builder.Property(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsSameAsPropertyAddress).HasColumnName(@"IsSameAsPropertyAddress").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Borrower).WithMany(b => b.BorrowerResidences).HasForeignKey(c => c.BorrowerId).OnDelete(DeleteBehavior.SetNull); // FK_BorrowerResidence_Borrower
            builder.HasOne(a => a.LandLordAddress).WithMany(b => b.BorrowerResidences_LandLordAddressId).HasForeignKey(c => c.LandLordAddressId).OnDelete(DeleteBehavior.SetNull); // FK_BorrowerResidence_AddressInfo
            builder.HasOne(a => a.LoanAddress).WithMany(b => b.BorrowerResidences_LoanAddressId).HasForeignKey(c => c.LoanAddressId).OnDelete(DeleteBehavior.SetNull); // FK_BorrowerResidence_LoanAddress
            builder.HasOne(a => a.LoanContact).WithMany(b => b.BorrowerResidences).HasForeignKey(c => c.LandLordContactId).OnDelete(DeleteBehavior.SetNull); // FK_BorrowerResidence_LoanContact
            builder.HasOne(a => a.OwnershipType).WithMany(b => b.BorrowerResidences).HasForeignKey(c => c.OwnershipTypeId).OnDelete(DeleteBehavior.SetNull); // FK_BorrowerResidence_OwnershipType
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
