// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Identity.Data.Mapping
{
    using Identity.Entity.Models;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;

    // User
    
    public partial class UserMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<User>
    {
        public void Configure(EntityTypeBuilder<User> builder)
        {
            builder.ToTable("User", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            builder.Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            builder.Property(x => x.PasswordFormatId).HasColumnName(@"PasswordFormatId").HasColumnType("int").IsRequired();
            builder.Property(x => x.PasswordSalt).HasColumnName(@"PasswordSalt").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.UserTypeId).HasColumnName(@"UserTypeId").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedOnUtc).HasColumnName(@"ModifiedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsLoggedIn).HasColumnName(@"IsLoggedIn").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.LastLoginOnUtc).HasColumnName(@"LastLoginOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LastLogoutOnUtc).HasColumnName(@"LastLogoutOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.FailedPasswordAttemptCount).HasColumnName(@"FailedPasswordAttemptCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsLockedOut).HasColumnName(@"IsLockedOut").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.LastLockedOutDateUtc).HasColumnName(@"LastLockedOutDateUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TwoFaEnabled).HasColumnName(@"TwoFAEnabled").HasColumnType("bit").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.UserType).WithMany(b => b.Users).HasForeignKey(c => c.UserTypeId).OnDelete(DeleteBehavior.SetNull); // FK_User_UserTypes
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
