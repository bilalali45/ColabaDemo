// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // Notification
    
    public partial class NotificationMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<Notification>
    {
        public void Configure(EntityTypeBuilder<Notification> builder)
        {
            builder.ToTable("Notification", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(350);
            builder.Property(x => x.Message).HasColumnName(@"Message").HasColumnType("nvarchar").IsRequired().HasMaxLength(1500);
            builder.Property(x => x.IsEmployeeNotification).HasColumnName(@"IsEmployeeNotification").HasColumnType("bit").IsRequired();
            builder.Property(x => x.OpportunityId).HasColumnName(@"OpportunityId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Url).HasColumnName(@"Url").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.NotificationTypeId).HasColumnName(@"NotificationTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CriticalId).HasColumnName(@"CriticalId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsPosted).HasColumnName(@"IsPosted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsPitched).HasColumnName(@"IsPitched").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedOnUtc).HasColumnName(@"ModifiedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Customer).WithMany(b => b.Notifications).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.SetNull); // FK_Notification_Customer
            builder.HasOne(a => a.Employee).WithMany(b => b.Notifications).HasForeignKey(c => c.EmployeeId).OnDelete(DeleteBehavior.SetNull); // FK_Notification_Employee
            builder.HasOne(a => a.Opportunity).WithMany(b => b.Notifications).HasForeignKey(c => c.OpportunityId).OnDelete(DeleteBehavior.SetNull); // FK_Notification_Opportunity
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
