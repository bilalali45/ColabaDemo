// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // Note
    
    public partial class NoteMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<Note>
    {
        public void Configure(EntityTypeBuilder<Note> builder)
        {
            builder.ToTable("Note", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.NoteTopicId).HasColumnName(@"NoteTopicId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedOnUtc).HasColumnName(@"ModifiedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.EntityRefTypeId).HasColumnName(@"EntityRefTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EntityRefId).HasColumnName(@"EntityRefId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.EntityRefType).WithMany(b => b.Notes_EntityRefTypeId).HasForeignKey(c => c.EntityRefTypeId).OnDelete(DeleteBehavior.SetNull); // FK_Note_EntityRefType
            builder.HasOne(a => a.EntityType_EntityTypeId).WithMany(b => b.Notes_EntityTypeId).HasForeignKey(c => c.EntityTypeId).OnDelete(DeleteBehavior.SetNull); // FK_Note_EntityType
            builder.HasOne(a => a.NoteTopic).WithMany(b => b.Notes).HasForeignKey(c => c.NoteTopicId).OnDelete(DeleteBehavior.SetNull); // FK_Note_NoteTopic
            builder.HasOne(a => a.UserProfile).WithMany(b => b.Notes).HasForeignKey(c => c.ModifiedBy).OnDelete(DeleteBehavior.SetNull); // FK_Note_UserProfile
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
