// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // Product
    
    public partial class ProductMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<Product>
    {
        public void Configure(EntityTypeBuilder<Product> builder)
        {
            builder.ToTable("Product", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            builder.Property(x => x.AliasName).HasColumnName(@"AliasName").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ProductDetail).HasColumnName(@"ProductDetail").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.ProductTypeId).HasColumnName(@"ProductTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LoanTypeId).HasColumnName(@"LoanTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AmortizationTypeId).HasColumnName(@"AmortizationTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AmortizationPeriodMonths).HasColumnName(@"AmortizationPeriodMonths").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FixedTermMonths).HasColumnName(@"FixedTermMonths").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InitialArmTermMonth).HasColumnName(@"InitialArmTermMonth").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SubsequentChangeMonth).HasColumnName(@"SubsequentChangeMonth").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LoanIndexTypeId).HasColumnName(@"LoanIndexTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductFamilyId).HasColumnName(@"ProductFamilyId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AusProcessingTypeId).HasColumnName(@"AusProcessingTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductQualifierId).HasColumnName(@"ProductQualifierId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductClassId).HasColumnName(@"ProductClassId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductBestExId).HasColumnName(@"ProductBestExId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AgencyId).HasColumnName(@"AgencyId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ResidualIncome).HasColumnName(@"ResidualIncome").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.MiCutOff).HasColumnName(@"MiCutOff").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.InitialRateCap).HasColumnName(@"InitialRateCap").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.PeriodicRateCap).HasColumnName(@"PeriodicRateCap").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.LifeTimeCap).HasColumnName(@"LifeTimeCap").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Margin).HasColumnName(@"Margin").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Floor).HasColumnName(@"Floor").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.MinRate).HasColumnName(@"MinRate").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.MaxRate).HasColumnName(@"MaxRate").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.MinLockDays).HasColumnName(@"MinLockDays").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MaxLockDays).HasColumnName(@"MaxLockDays").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MinLoanAmount).HasColumnName(@"MinLoanAmount").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.MaxLoanAmount).HasColumnName(@"MaxLoanAmount").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.IsInterestOnly).HasColumnName(@"IsInterestOnly").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.InterestOnlyMonth).HasColumnName(@"InterestOnlyMonth").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsBalloonPayment).HasColumnName(@"IsBalloonPayment").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.BalloonTermMonth).HasColumnName(@"BalloonTermMonth").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsPrepayPenalty).HasColumnName(@"IsPrepayPenalty").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.PrepayPenaltyId).HasColumnName(@"PrepayPenaltyId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PrepayPenaltyTermMonth).HasColumnName(@"PrepayPenaltyTermMonth").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsAssumable).HasColumnName(@"IsAssumable").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsServicing).HasColumnName(@"IsServicing").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsNegativeAmortization).HasColumnName(@"IsNegativeAmortization").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsTemporaryRateBuydown).HasColumnName(@"IsTemporaryRateBuydown").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.InitialBuydownRate).HasColumnName(@"InitialBuydownRate").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.LatePaymentDays).HasColumnName(@"LatePaymentDays").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LatePaymentPercent).HasColumnName(@"LatePaymentPercent").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.PrepaidInterestDays).HasColumnName(@"PrepaidInterestDays").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LeName).HasColumnName(@"LeName").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ProductCode).HasColumnName(@"ProductCode").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsDefault).HasColumnName(@"IsDefault").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsSystem).HasColumnName(@"IsSystem").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedOnUtc).HasColumnName(@"ModifiedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TpId).HasColumnName(@"TpId").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TpName).HasColumnName(@"TpName").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(3000);

            // Foreign keys
            builder.HasOne(a => a.Agency).WithMany(b => b.Products).HasForeignKey(c => c.AgencyId).OnDelete(DeleteBehavior.SetNull); // FK_Product_Agency
            builder.HasOne(a => a.AusProcessingType).WithMany(b => b.Products).HasForeignKey(c => c.AusProcessingTypeId).OnDelete(DeleteBehavior.SetNull); // FK_Product_AusProcessingType
            builder.HasOne(a => a.LoanIndexType).WithMany(b => b.Products).HasForeignKey(c => c.LoanIndexTypeId).OnDelete(DeleteBehavior.SetNull); // FK_Product_LoanIndexType
            builder.HasOne(a => a.LoanType).WithMany(b => b.Products).HasForeignKey(c => c.LoanTypeId).OnDelete(DeleteBehavior.SetNull); // FK_Product_LoanType
            builder.HasOne(a => a.PrepayPenalty).WithMany(b => b.Products).HasForeignKey(c => c.PrepayPenaltyId).OnDelete(DeleteBehavior.SetNull); // FK_Product_PrepayPenalty
            builder.HasOne(a => a.ProductAmortizationType).WithMany(b => b.Products).HasForeignKey(c => c.AmortizationTypeId).OnDelete(DeleteBehavior.SetNull); // FK_Product_ProductAmortizationType
            builder.HasOne(a => a.ProductBestEx).WithMany(b => b.Products).HasForeignKey(c => c.ProductBestExId).OnDelete(DeleteBehavior.SetNull); // FK_Product_ProductBestEx
            builder.HasOne(a => a.ProductClass).WithMany(b => b.Products).HasForeignKey(c => c.ProductClassId).OnDelete(DeleteBehavior.SetNull); // FK_Product_ProductClass
            builder.HasOne(a => a.ProductFamily).WithMany(b => b.Products).HasForeignKey(c => c.ProductFamilyId).OnDelete(DeleteBehavior.SetNull); // FK_Product_ProductFamily
            builder.HasOne(a => a.ProductQualifier).WithMany(b => b.Products).HasForeignKey(c => c.ProductQualifierId).OnDelete(DeleteBehavior.SetNull); // FK_Product_ProductQualifier
            builder.HasOne(a => a.ProductType).WithMany(b => b.Products).HasForeignKey(c => c.ProductTypeId).OnDelete(DeleteBehavior.SetNull); // FK_Product_ProductType
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
