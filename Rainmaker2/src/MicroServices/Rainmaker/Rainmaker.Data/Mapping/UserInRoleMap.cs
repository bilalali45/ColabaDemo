// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // UserInRole
    
    public partial class UserInRoleMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<UserInRole>
    {
        public void Configure(EntityTypeBuilder<UserInRole> builder)
        {
            builder.ToTable("UserInRole", "dbo");
            builder.HasKey(x => new { x.UserId, x.RoleId });

            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired().ValueGeneratedNever();

            // Foreign keys
            builder.HasOne(a => a.UserProfile).WithMany(b => b.UserInRoles).HasForeignKey(c => c.UserId); // FK_UserInRole_UserProfile
            builder.HasOne(a => a.UserRole).WithMany(b => b.UserInRoles).HasForeignKey(c => c.RoleId); // FK_UserInRole_UserRole
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
