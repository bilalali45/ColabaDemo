// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // Branch
    
    public partial class BranchMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<Branch>
    {
        public void Configure(EntityTypeBuilder<Branch> builder)
        {
            builder.ToTable("Branch", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsDefault).HasColumnName(@"IsDefault").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsSystem).HasColumnName(@"IsSystem").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedOnUtc).HasColumnName(@"ModifiedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsHeadOffice).HasColumnName(@"IsHeadOffice").HasColumnType("bit").IsRequired();
            builder.Property(x => x.HeadOfficeId).HasColumnName(@"HeadOfficeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmailAccountId).HasColumnName(@"EmailAccountId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TimeZoneId).HasColumnName(@"TimeZoneId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CountryId).HasColumnName(@"CountryId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StateId).HasColumnName(@"StateId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CountyId).HasColumnName(@"CountyId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CityName).HasColumnName(@"CityName").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.CityId).HasColumnName(@"CityId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Address1).HasColumnName(@"Address1").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.Address2).HasColumnName(@"Address2").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ZipPostalCode).HasColumnName(@"ZipPostalCode").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.NmlsNo).HasColumnName(@"NmlsNo").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LoanUrl).HasColumnName(@"LoanUrl").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ScheduleUrl).HasColumnName(@"ScheduleUrl").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);

            // Foreign keys
            builder.HasOne(a => a.City).WithMany(b => b.Branches).HasForeignKey(c => c.CityId).OnDelete(DeleteBehavior.SetNull); // FK_Branch_City
            builder.HasOne(a => a.County).WithMany(b => b.Branches).HasForeignKey(c => c.CountyId).OnDelete(DeleteBehavior.SetNull); // FK_Branch_County
            builder.HasOne(a => a.EmailAccount).WithMany(b => b.Branches).HasForeignKey(c => c.EmailAccountId).OnDelete(DeleteBehavior.SetNull); // FK_Branch_EmailAccount
            builder.HasOne(a => a.HeadOffice).WithMany(b => b.Branches).HasForeignKey(c => c.HeadOfficeId).OnDelete(DeleteBehavior.SetNull); // FK_Branch_Branch
            builder.HasOne(a => a.State).WithMany(b => b.Branches).HasForeignKey(c => c.StateId).OnDelete(DeleteBehavior.SetNull); // FK_Branch_State
            builder.HasOne(a => a.TimeZone).WithMany(b => b.Branches).HasForeignKey(c => c.TimeZoneId).OnDelete(DeleteBehavior.SetNull); // FK_Branch_TimeZone
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
