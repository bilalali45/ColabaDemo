// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // BorrowerLiability
    
    public partial class BorrowerLiabilityMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<BorrowerLiability>
    {
        public void Configure(EntityTypeBuilder<BorrowerLiability> builder)
        {
            builder.ToTable("BorrowerLiability", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.BorrowerId).HasColumnName(@"BorrowerId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AddressInfoId).HasColumnName(@"AddressInfoId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LiabilityTypeId).HasColumnName(@"LiabilityTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MonthlyPayment).HasColumnName(@"MonthlyPayment").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.Balance).HasColumnName(@"Balance").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.WillBePaidByThisLoan).HasColumnName(@"WillBePaidByThisLoan").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.RemainingMonth).HasColumnName(@"RemainingMonth").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AddressInfo).WithMany(b => b.BorrowerLiabilities).HasForeignKey(c => c.AddressInfoId).OnDelete(DeleteBehavior.SetNull); // FK_BorrowerLiability_AddressInfo
            builder.HasOne(a => a.Borrower).WithMany(b => b.BorrowerLiabilities).HasForeignKey(c => c.BorrowerId).OnDelete(DeleteBehavior.SetNull); // FK_BorrowerLiability_Borrower
            builder.HasOne(a => a.LiabilityType).WithMany(b => b.BorrowerLiabilities).HasForeignKey(c => c.LiabilityTypeId).OnDelete(DeleteBehavior.SetNull); // FK_BorrowerLiability_LiabilityType
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
