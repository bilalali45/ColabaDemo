// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // MortgageOnProperty
    
    public partial class MortgageOnPropertyMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<MortgageOnProperty>
    {
        public void Configure(EntityTypeBuilder<MortgageOnProperty> builder)
        {
            builder.ToTable("MortgageOnProperty", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.PropertyOwnId).HasColumnName(@"PropertyOwnId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsFirstMortgage).HasColumnName(@"IsFirstMortgage").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.SecondLienTypeId).HasColumnName(@"SecondLienTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MortgageBalance).HasColumnName(@"MortgageBalance").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.MortgageLimit).HasColumnName(@"MortgageLimit").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.PaidAtClosing).HasColumnName(@"PaidAtClosing").HasColumnType("bit").IsRequired();
            builder.Property(x => x.WasSmTaken).HasColumnName(@"WasSmTaken").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.LenderName).HasColumnName(@"LenderName").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.MonthlyPayment).HasColumnName(@"MonthlyPayment").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.PrepaymentPenalty).HasColumnName(@"PrepaymentPenalty").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.CurrentTermLeft).HasColumnName(@"CurrentTermLeft").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsWithEscrow).HasColumnName(@"IsWithEscrow").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ProductFamilyId).HasColumnName(@"ProductFamilyId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LoanTypeId).HasColumnName(@"LoanTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AmortizationTypeId).HasColumnName(@"AmortizationTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Rate).HasColumnName(@"Rate").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.TermInYears).HasColumnName(@"TermInYears").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.LoanType).WithMany(b => b.MortgageOnProperties).HasForeignKey(c => c.LoanTypeId).OnDelete(DeleteBehavior.SetNull); // FK_MortgageOnProperty_LoanType
            builder.HasOne(a => a.ProductAmortizationType).WithMany(b => b.MortgageOnProperties).HasForeignKey(c => c.AmortizationTypeId).OnDelete(DeleteBehavior.SetNull); // FK_MortgageOnProperty_ProductAmortizationType
            builder.HasOne(a => a.ProductFamily).WithMany(b => b.MortgageOnProperties).HasForeignKey(c => c.ProductFamilyId).OnDelete(DeleteBehavior.SetNull); // FK_MortgageOnProperty_ProductFamily
            builder.HasOne(a => a.PropertyInfo).WithMany(b => b.MortgageOnProperties).HasForeignKey(c => c.PropertyOwnId).OnDelete(DeleteBehavior.SetNull); // FK_MortgageOnProperty_PropertyInfo
            builder.HasOne(a => a.SecondLienType).WithMany(b => b.MortgageOnProperties).HasForeignKey(c => c.SecondLienTypeId).OnDelete(DeleteBehavior.SetNull); // FK_MortgageOnProperty_SecondLienType
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
