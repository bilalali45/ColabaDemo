// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // EmploymentInfo
    
    public partial class EmploymentInfoMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<EmploymentInfo>
    {
        public void Configure(EntityTypeBuilder<EmploymentInfo> builder)
        {
            builder.ToTable("EmploymentInfo", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.LoanId).HasColumnName(@"LoanId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployerAddressId).HasColumnName(@"EmployerAddressId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            builder.Property(x => x.JobTitle).HasColumnName(@"JobTitle").HasColumnType("varchar").IsRequired(false).IsUnicode(false).HasMaxLength(500);
            builder.Property(x => x.BorrowerId).HasColumnName(@"BorrowerId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsSelfEmployed).HasColumnName(@"IsSelfEmployed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Position).HasColumnName(@"Position").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.JobTypeId).HasColumnName(@"JobTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(15);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.MonthlyBaseIncome).HasColumnName(@"MonthlyBaseIncome").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.EmployeeNumber).HasColumnName(@"EmployeeNumber").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EmployerComment).HasColumnName(@"EmployerComment").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(2500);
            builder.Property(x => x.YearsInProfession).HasColumnName(@"YearsInProfession").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ContactPersonId).HasColumnName(@"ContactPersonId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsCurrentJob).HasColumnName(@"IsCurrentJob").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.IsHourlyPayment).HasColumnName(@"IsHourlyPayment").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsPlanToChangePriorToClosing).HasColumnName(@"IsPlanToChangePriorToClosing").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.OwnershipPercentage).HasColumnName(@"OwnershipPercentage").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.IsEmployedByPartyInTransaction).HasColumnName(@"IsEmployedByPartyInTransaction").HasColumnType("bit").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AddressInfo).WithMany(b => b.EmploymentInfoes).HasForeignKey(c => c.EmployerAddressId).OnDelete(DeleteBehavior.SetNull); // FK_EmploymentInfo_AddressInfo
            builder.HasOne(a => a.Borrower).WithMany(b => b.EmploymentInfoes).HasForeignKey(c => c.BorrowerId).OnDelete(DeleteBehavior.SetNull); // FK_EmploymentInfo_Borrower
            builder.HasOne(a => a.JobType).WithMany(b => b.EmploymentInfoes).HasForeignKey(c => c.JobTypeId).OnDelete(DeleteBehavior.SetNull); // FK_EmploymentInfo_JobType
            builder.HasOne(a => a.LoanContact).WithMany(b => b.EmploymentInfoes).HasForeignKey(c => c.ContactPersonId).OnDelete(DeleteBehavior.SetNull); // FK_EmploymentInfo_LoanContact
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
