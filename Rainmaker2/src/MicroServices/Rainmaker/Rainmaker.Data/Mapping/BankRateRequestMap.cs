// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // BankRateRequest
    
    public partial class BankRateRequestMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<BankRateRequest>
    {
        public void Configure(EntityTypeBuilder<BankRateRequest> builder)
        {
            builder.ToTable("BankRateRequest", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.RequestStartDateUtc).HasColumnName(@"RequestStartDateUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.RequestEndDateUtc).HasColumnName(@"RequestEndDateUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsCompleted).HasColumnName(@"IsCompleted").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.LastStatusId).HasColumnName(@"LastStatusId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StatusId).HasColumnName(@"StatusId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.LastStatus).WithMany(b => b.BankRateRequests_LastStatusId).HasForeignKey(c => c.LastStatusId).OnDelete(DeleteBehavior.SetNull); // FK_BankRateRequest_BankRateLastStage
            builder.HasOne(a => a.Status).WithMany(b => b.BankRateRequests_StatusId).HasForeignKey(c => c.StatusId).OnDelete(DeleteBehavior.SetNull); // FK_BankRateRequest_BankRateStage
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
