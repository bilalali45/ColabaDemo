// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // CmsPage
    
    public partial class CmsPageMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<CmsPage>
    {
        public void Configure(EntityTypeBuilder<CmsPage> builder)
        {
            builder.ToTable("CmsPage", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.SystemName).HasColumnName(@"SystemName").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.IncludeInSitemap).HasColumnName(@"IncludeInSitemap").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsPasswordProtected).HasColumnName(@"IsPasswordProtected").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Body).HasColumnName(@"Body").HasColumnType("ntext").IsRequired(false);
            builder.Property(x => x.MetaKeywords).HasColumnName(@"MetaKeywords").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.MetaDescription).HasColumnName(@"MetaDescription").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.MetaTitle).HasColumnName(@"MetaTitle").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            builder.Property(x => x.BusinessUnitId).HasColumnName(@"BusinessUnitId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TypeId).HasColumnName(@"TypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsSystem).HasColumnName(@"IsSystem").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsSystemPage).HasColumnName(@"IsSystemPage").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.SystemPageId).HasColumnName(@"SystemPageId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedOnUtc).HasColumnName(@"ModifiedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LinkTitle).HasColumnName(@"LinkTitle").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.MenuLocation).HasColumnName(@"MenuLocation").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LayoutSetting).HasColumnName(@"LayoutSetting").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PageHeader).HasColumnName(@"PageHeader").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.PageHeaderCss).HasColumnName(@"PageHeaderCss").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.ControlOnPage).HasColumnName(@"ControlOnPage").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ChangeFreqId).HasColumnName(@"ChangeFreqId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Priority).HasColumnName(@"Priority").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.PageForId).HasColumnName(@"PageForId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.BusinessUnit).WithMany(b => b.CmsPages).HasForeignKey(c => c.BusinessUnitId).OnDelete(DeleteBehavior.SetNull); // FK_CmsPage_BusinessUnit
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
