// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // BankRateArchive
    
    public partial class BankRateArchiveMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<BankRateArchive>
    {
        public void Configure(EntityTypeBuilder<BankRateArchive> builder)
        {
            builder.ToTable("BankRateArchive", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.BankRequestId).HasColumnName(@"BankRequestId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BankRateParameterId).HasColumnName(@"BankRateParameterId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BankRatePriceRequestId).HasColumnName(@"BankRatePriceRequestId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Rate).HasColumnName(@"Rate").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Apr).HasColumnName(@"Apr").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.DiscountPoint).HasColumnName(@"DiscountPoint").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Charges).HasColumnName(@"Charges").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.Price).HasColumnName(@"Price").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.LenderFee).HasColumnName(@"LenderFee").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.InitialRateCap).HasColumnName(@"InitialRateCap").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.PeriodicRateCap).HasColumnName(@"PeriodicRateCap").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.LifeTimeCap).HasColumnName(@"LifeTimeCap").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.BankRateName).HasColumnName(@"BankRateName").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.InstanceId).HasColumnName(@"InstanceId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InstanceNo).HasColumnName(@"InstanceNo").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.InstanceName).HasColumnName(@"InstanceName").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.PointNo).HasColumnName(@"PointNo").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TierNo).HasColumnName(@"TierNo").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BankRateProductId).HasColumnName(@"BankRateProductId").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.MinLoan).HasColumnName(@"MinLoan").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.MaxLoan).HasColumnName(@"MaxLoan").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.DateUtc).HasColumnName(@"DateUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertDateTimeUtc).HasColumnName(@"InsertDateTimeUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsZeroRate).HasColumnName(@"IsZeroRate").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.BankRateParameter).WithMany(b => b.BankRateArchives).HasForeignKey(c => c.BankRateParameterId).OnDelete(DeleteBehavior.SetNull); // FK_BankRateArchive_BankRateParameter
            builder.HasOne(a => a.BankRatePricingRequest).WithMany(b => b.BankRateArchives).HasForeignKey(c => c.BankRatePriceRequestId).OnDelete(DeleteBehavior.SetNull); // FK_BankRateArchive_BankRatePricingRequest
            builder.HasOne(a => a.BankRateRequest).WithMany(b => b.BankRateArchives).HasForeignKey(c => c.BankRequestId).OnDelete(DeleteBehavior.SetNull); // FK_BankRateArchive_BankRateRequest
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
