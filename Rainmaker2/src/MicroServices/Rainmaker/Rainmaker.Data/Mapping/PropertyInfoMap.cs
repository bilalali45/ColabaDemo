// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // PropertyInfo
    
    public partial class PropertyInfoMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<PropertyInfo>
    {
        public void Configure(EntityTypeBuilder<PropertyInfo> builder)
        {
            builder.ToTable("PropertyInfo", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.LenderName).HasColumnName(@"LenderName").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.AddressInfoId).HasColumnName(@"AddressInfoId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PropertyStatus).HasColumnName(@"PropertyStatus").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PropertyTypeId).HasColumnName(@"PropertyTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PropertyUsageId).HasColumnName(@"PropertyUsageId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsMixedUseProperty).HasColumnName(@"IsMixedUseProperty").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.OriginalPurchasePrice).HasColumnName(@"OriginalPurchasePrice").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.BuiltDate).HasColumnName(@"BuiltDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.DateAcquired).HasColumnName(@"DateAcquired").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.NoOfUnits).HasColumnName(@"NoOfUnits").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LandValue).HasColumnName(@"LandValue").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.ImprovementCost).HasColumnName(@"ImprovementCost").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.ConstructionPeriod).HasColumnName(@"ConstructionPeriod").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DescribeImprovement).HasColumnName(@"DescribeImprovement").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.IsImprovementToBeMade).HasColumnName(@"IsImprovementToBeMade").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.PropertyValue).HasColumnName(@"PropertyValue").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.RentalIncome).HasColumnName(@"RentalIncome").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.RentalPercentage).HasColumnName(@"RentalPercentage").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.ParticipationPercentage).HasColumnName(@"ParticipationPercentage").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.FirstMortgageBalance).HasColumnName(@"FirstMortgageBalance").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.IsSecondLien).HasColumnName(@"IsSecondLien").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.SecondLienBalance).HasColumnName(@"SecondLienBalance").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.SecondLienLimit).HasColumnName(@"SecondLienLimit").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.MortgageToBePaid).HasColumnName(@"MortgageToBePaid").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.MortgageToBeSubordinate).HasColumnName(@"MortgageToBeSubordinate").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.TotalMonthlyPayment).HasColumnName(@"TotalMonthlyPayment").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.IsWithEscrow).HasColumnName(@"IsWithEscrow").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.LegalDescription).HasColumnName(@"LegalDescription").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(2000);
            builder.Property(x => x.HoaName).HasColumnName(@"HoaName").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.HoaDues).HasColumnName(@"HoaDues").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.TitleNamesWillbe).HasColumnName(@"TitleNamesWillbe").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.TitleMannerId).HasColumnName(@"TitleMannerId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TitleEstateId).HasColumnName(@"TitleEstateId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TitleTrustInfoId).HasColumnName(@"TitleTrustInfoId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TitleLandTenureId).HasColumnName(@"TitleLandTenureId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LeaseholdExpireDate).HasColumnName(@"LeaseholdExpireDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsCompletedCashout).HasColumnName(@"IsCompletedCashout").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IntentToSellPriorToPurchase).HasColumnName(@"IntentToSellPriorToPurchase").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.MonthlyDue).HasColumnName(@"MonthlyDue").HasColumnType("decimal(18,0)").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AddressInfo).WithMany(b => b.PropertyInfoes).HasForeignKey(c => c.AddressInfoId).OnDelete(DeleteBehavior.SetNull); // FK_PropertyInfo_AddressInfo
            builder.HasOne(a => a.PropertyType).WithMany(b => b.PropertyInfoes).HasForeignKey(c => c.PropertyTypeId).OnDelete(DeleteBehavior.SetNull); // FK_PropertyInfo_PropertyType
            builder.HasOne(a => a.PropertyUsage).WithMany(b => b.PropertyInfoes).HasForeignKey(c => c.PropertyUsageId).OnDelete(DeleteBehavior.SetNull); // FK_PropertyInfo_PropertyUsage
            builder.HasOne(a => a.TitleEstate).WithMany(b => b.PropertyInfoes).HasForeignKey(c => c.TitleEstateId).OnDelete(DeleteBehavior.SetNull); // FK_PropertyInfo_TitleEstate
            builder.HasOne(a => a.TitleLandTenure).WithMany(b => b.PropertyInfoes).HasForeignKey(c => c.TitleLandTenureId).OnDelete(DeleteBehavior.SetNull); // FK_PropertyInfo_TitleLandTenure
            builder.HasOne(a => a.TitleManner).WithMany(b => b.PropertyInfoes).HasForeignKey(c => c.TitleEstateId).OnDelete(DeleteBehavior.SetNull); // FK_PropertyInfo_TitleManner
            builder.HasOne(a => a.TitleTrustInfo).WithMany(b => b.PropertyInfoes).HasForeignKey(c => c.TitleTrustInfoId).OnDelete(DeleteBehavior.SetNull); // FK_PropertyInfo_TitleTrustInfo
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
