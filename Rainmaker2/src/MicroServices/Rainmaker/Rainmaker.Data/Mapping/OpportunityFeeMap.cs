// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // OpportunityFee
    
    public partial class OpportunityFeeMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<OpportunityFee>
    {
        public void Configure(EntityTypeBuilder<OpportunityFee> builder)
        {
            builder.ToTable("OpportunityFee", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.FeeBlockId).HasColumnName(@"FeeBlockId").HasColumnType("int").IsRequired();
            builder.Property(x => x.FeeId).HasColumnName(@"FeeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OpportunityId).HasColumnName(@"OpportunityId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsNegativeFee).HasColumnName(@"IsNegativeFee").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsIncludeInApr).HasColumnName(@"IsIncludeInApr").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsIncludeInClosingCost).HasColumnName(@"IsIncludeInClosingCost").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsFinancedToLoan).HasColumnName(@"IsFinancedToLoan").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsOriginationFee).HasColumnName(@"IsOriginationFee").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Value).HasColumnName(@"Value").HasColumnType("decimal(18,3)").IsRequired();
            builder.Property(x => x.FeeTypeId).HasColumnName(@"FeeTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FeeNumber).HasColumnName(@"FeeNumber").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.StartDateUtc).HasColumnName(@"StartDateUtc").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.EndDateUtc).HasColumnName(@"EndDateUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsDefault).HasColumnName(@"IsDefault").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsSystem).HasColumnName(@"IsSystem").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedOnUtc).HasColumnName(@"ModifiedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CreditedById).HasColumnName(@"CreditedById").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Fee).WithMany(b => b.OpportunityFees).HasForeignKey(c => c.FeeId).OnDelete(DeleteBehavior.SetNull); // FK_OpportunityFee_Fee
            builder.HasOne(a => a.FeeBlock).WithMany(b => b.OpportunityFees).HasForeignKey(c => c.FeeBlockId).OnDelete(DeleteBehavior.SetNull); // FK_OpportunityFee_FeeBlock
            builder.HasOne(a => a.FeeType).WithMany(b => b.OpportunityFees).HasForeignKey(c => c.FeeTypeId).OnDelete(DeleteBehavior.SetNull); // FK_OpportunityFee_FeeType
            builder.HasOne(a => a.Opportunity).WithMany(b => b.OpportunityFees).HasForeignKey(c => c.OpportunityId).OnDelete(DeleteBehavior.SetNull); // FK_OpportunityFee_Opportunity
            builder.HasOne(a => a.PaidBy).WithMany(b => b.OpportunityFees).HasForeignKey(c => c.CreditedById).OnDelete(DeleteBehavior.SetNull); // FK_OpportunityFee_PaidBy
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
