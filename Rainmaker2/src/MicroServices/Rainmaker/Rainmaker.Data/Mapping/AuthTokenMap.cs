// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // AuthToken
    
    public partial class AuthTokenMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<AuthToken>
    {
        public void Configure(EntityTypeBuilder<AuthToken> builder)
        {
            builder.ToTable("AuthToken", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ApplicationKeyId).HasColumnName(@"ApplicationKeyId").HasColumnType("int").IsRequired();
            builder.Property(x => x.UserProfileId).HasColumnName(@"UserProfileId").HasColumnType("int").IsRequired();
            builder.Property(x => x.TpToken).HasColumnName(@"TpToken").HasColumnType("nvarchar").IsRequired().HasMaxLength(500);
            builder.Property(x => x.Token).HasColumnName(@"Token").HasColumnType("nvarchar").IsRequired().HasMaxLength(500);
            builder.Property(x => x.IssuedOn).HasColumnName(@"IssuedOn").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.ExpireOn).HasColumnName(@"ExpireOn").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.IsExpired).HasColumnName(@"IsExpired").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.SessionLogId).HasColumnName(@"SessionLogId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AuthApplicationKey).WithMany(b => b.AuthTokens).HasForeignKey(c => c.ApplicationKeyId).OnDelete(DeleteBehavior.SetNull); // FK_AuthToken_AuthApplicationKey
            builder.HasOne(a => a.UserProfile).WithMany(b => b.AuthTokens).HasForeignKey(c => c.UserProfileId).OnDelete(DeleteBehavior.SetNull); // FK_AuthToken_UserProfile
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
