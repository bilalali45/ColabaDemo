// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Milestone.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using Milestone.Entity.Models;

    // MilestoneStatusConfiguration
    
    public partial class MilestoneStatusConfigurationMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<MilestoneStatusConfiguration>
    {
        public void Configure(EntityTypeBuilder<MilestoneStatusConfiguration> builder)
        {
            builder.ToTable("MilestoneStatusConfiguration", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired();
            builder.Property(x => x.FromStatus).HasColumnName(@"FromStatus").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ToStatus).HasColumnName(@"ToStatus").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NoofDays).HasColumnName(@"NoofDays").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.RecurringTime).HasColumnName(@"RecurringTime").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Milestone).WithMany(b => b.MilestoneStatusConfigurations).HasForeignKey(c => c.FromStatus).OnDelete(DeleteBehavior.SetNull); // FK_MilestoneStatusUpdate_MilestoneStatusUpdate
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
