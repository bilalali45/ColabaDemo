{"id":"FbLS","dependencies":[{"name":"D:\\work\\Rainmaker2\\Rainmaker2\\src\\Presentation\\libraries\\rainsoft-authorization\\node_modules\\@microsoft\\signalr\\dist\\esm\\IHubProtocol.js.map","includedInParent":true,"mtime":1606744555153},{"name":"D:\\work\\Rainmaker2\\Rainmaker2\\src\\Presentation\\libraries\\rainsoft-authorization\\package.json","includedInParent":true,"mtime":1609144240016},{"name":"D:\\work\\Rainmaker2\\Rainmaker2\\src\\Presentation\\libraries\\rainsoft-authorization\\node_modules\\@microsoft\\signalr\\package.json","includedInParent":true,"mtime":1606744555153}],"generated":{"js":"\"use strict\";var e;Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.MessageType=void 0,exports.MessageType=e,function(e){e[e.Invocation=1]=\"Invocation\",e[e.StreamItem=2]=\"StreamItem\",e[e.Completion=3]=\"Completion\",e[e.StreamInvocation=4]=\"StreamInvocation\",e[e.CancelInvocation=5]=\"CancelInvocation\",e[e.Ping=6]=\"Ping\",e[e.Close=7]=\"Close\"}(e||(exports.MessageType=e={}));"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":13}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":12},"generated":{"line":1,"column":17}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":19}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":26}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":41}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":49}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":62}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":63}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":70}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":74}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":82}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":99}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":101}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":109}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":121}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":123}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":12},"generated":{"line":1,"column":132}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":1,"column":135}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":1,"column":137}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":1,"column":139}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":1,"column":150}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":1,"column":153}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":1,"column":166}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":1,"column":168}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":1,"column":170}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":1,"column":181}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":1,"column":184}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":1,"column":197}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":1,"column":199}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":1,"column":201}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":1,"column":212}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":1,"column":215}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":1,"column":228}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":1,"column":230}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":1,"column":232}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":1,"column":249}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":1,"column":252}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":1,"column":271}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":1,"column":273}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":1,"column":275}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":1,"column":292}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":1,"column":295}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":1,"column":314}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":1,"column":316}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":1,"column":318}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":1,"column":323}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":1,"column":326}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":1,"column":333}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":1,"column":335}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":1,"column":337}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":1,"column":343}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":1,"column":346}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":354}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":12},"generated":{"line":1,"column":355}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":12},"generated":{"line":1,"column":359}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":12},"generated":{"line":1,"column":367}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":12},"generated":{"line":1,"column":379}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":23},"generated":{"line":1,"column":381}}],"sources":{"../../src/IHubProtocol.ts":"// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\n\r\n/** Defines the type of a Hub Message. */\r\nexport enum MessageType {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    Invocation = 1,\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    StreamItem = 2,\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    Completion = 3,\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    StreamInvocation = 4,\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    CancelInvocation = 5,\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    Ping = 6,\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    Close = 7,\r\n}\r\n\r\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\r\nexport interface MessageHeaders {\r\n    /** Gets or sets the header with the specified key. */\r\n    [key: string]: string;\r\n}\r\n\r\n/** Union type of all known Hub messages. */\r\nexport type HubMessage =\r\n    InvocationMessage |\r\n    StreamInvocationMessage |\r\n    StreamItemMessage |\r\n    CompletionMessage |\r\n    CancelInvocationMessage |\r\n    PingMessage |\r\n    CloseMessage;\r\n\r\n/** Defines properties common to all Hub messages. */\r\nexport interface HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageType} value indicating the type of this message. */\r\n    readonly type: MessageType;\r\n}\r\n\r\n/** Defines properties common to all Hub messages relating to a specific invocation. */\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageHeaders} dictionary containing headers attached to the message. */\r\n    readonly headers?: MessageHeaders;\r\n    /** The ID of the invocation relating to this message.\r\n     *\r\n     * This is expected to be present for {@link @microsoft/signalr.StreamInvocationMessage} and {@link @microsoft/signalr.CompletionMessage}. It may\r\n     * be 'undefined' for an {@link @microsoft/signalr.InvocationMessage} if the sender does not expect a response.\r\n     */\r\n    readonly invocationId?: string;\r\n}\r\n\r\n/** A hub message representing a non-streaming invocation. */\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Invocation;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds: string[];\r\n}\r\n\r\n/** A hub message representing a streaming invocation. */\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamInvocation;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds: string[];\r\n}\r\n\r\n/** A hub message representing a single item produced as part of a result stream. */\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamItem;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n\r\n    /** The item produced by the server. */\r\n    readonly item?: any;\r\n}\r\n\r\n/** A hub message representing the result of an invocation. */\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Completion;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The error produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly error?: string;\r\n    /** The result produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly result?: any;\r\n}\r\n\r\n/** A hub message indicating that the sender is still active. */\r\nexport interface PingMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\n/** A hub message indicating that the sender is closing the connection.\r\n *\r\n * If {@link @microsoft/signalr.CloseMessage.error} is defined, the sender is closing the connection due to an error.\r\n */\r\nexport interface CloseMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Close;\r\n    /** The error that triggered the close, if any.\r\n     *\r\n     * If this property is undefined, the connection was closed normally and without error.\r\n     */\r\n    readonly error?: string;\r\n\r\n    /** If true, clients with automatic reconnects enabled should attempt to reconnect after receiving the CloseMessage. Otherwise, they should not. */\r\n    readonly allowReconnect?: boolean;\r\n}\r\n\r\n/** A hub message sent to request that a streaming invocation be canceled. */\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.CancelInvocation;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n}\r\n\r\n/** A protocol abstraction for communicating with SignalR Hubs.  */\r\nexport interface IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    readonly name: string;\r\n    /** The version of the protocol. */\r\n    readonly version: number;\r\n    /** The {@link @microsoft/signalr.TransferFormat} of the protocol. */\r\n    readonly transferFormat: TransferFormat;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the `input` parameter must be a string, otherwise it must be an ArrayBuffer.\r\n     *\r\n     * @param {string | ArrayBuffer | Buffer} input A string, ArrayBuffer, or Buffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input: string | ArrayBuffer | Buffer, logger: ILogger): HubMessage[];\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string or ArrayBuffer and returns it.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message: HubMessage): string | ArrayBuffer;\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"7183123f345b558f320aa0363390efd2","cacheData":{"env":{}}}