// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // UserSetting
    
    public partial class Vortex_UserSettingMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<Vortex_UserSetting>
    {
        public void Configure(EntityTypeBuilder<Vortex_UserSetting> builder)
        {
            builder.ToTable("UserSetting", "Vortex");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.DefaultStatuId).HasColumnName(@"DefaultStatuId").HasColumnType("int").IsRequired();
            builder.Property(x => x.UserProfileId).HasColumnName(@"UserProfileId").HasColumnType("int").IsRequired();
            builder.Property(x => x.AfterCallWorkAuto).HasColumnName(@"AfterCallWorkAuto").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AfterCallWorkMin).HasColumnName(@"AfterCallWorkMin").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.HangupInSec).HasColumnName(@"HangupInSec").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.VoicemailInSec).HasColumnName(@"VoicemailInSec").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.VoicemailDirectly).HasColumnName(@"VoicemailDirectly").HasColumnType("bit").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.UserProfile).WithMany(b => b.Vortex_UserSettings).HasForeignKey(c => c.UserProfileId).OnDelete(DeleteBehavior.SetNull); // FK_Vortex.UserSetting_UserProfile
            builder.HasOne(a => a.Vortex_StatusList).WithMany(b => b.Vortex_UserSettings).HasForeignKey(c => c.DefaultStatuId).OnDelete(DeleteBehavior.SetNull); // FK_Vortex.UserSetting_StatusList
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
