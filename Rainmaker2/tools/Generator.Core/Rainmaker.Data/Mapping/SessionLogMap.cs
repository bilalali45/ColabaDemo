// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // SessionLog
    
    public partial class SessionLogMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<SessionLog>
    {
        public void Configure(EntityTypeBuilder<SessionLog> builder)
        {
            builder.ToTable("SessionLog", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.SessionId).HasColumnName(@"SessionId").HasColumnType("nvarchar").IsRequired().HasMaxLength(500);
            builder.Property(x => x.StartOnUtc).HasColumnName(@"StartOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EndOnUtc).HasColumnName(@"EndOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LastSeenOnUtc).HasColumnName(@"LastSeenOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UrlReferrer).HasColumnName(@"UrlReferrer").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.IpAddress).HasColumnName(@"IpAddress").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Country).HasColumnName(@"Country").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.State).HasColumnName(@"State").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.VisitorId).HasColumnName(@"VisitorId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Url).HasColumnName(@"Url").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.AdsSourceId).HasColumnName(@"AdsSourceId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.BusinessUnitId).HasColumnName(@"BusinessUnitId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ApplicationId).HasColumnName(@"ApplicationId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AdsSource).WithMany(b => b.SessionLogs).HasForeignKey(c => c.AdsSourceId).OnDelete(DeleteBehavior.SetNull); // FK_SessionLog_AdsSource
            builder.HasOne(a => a.Visitor).WithMany(b => b.SessionLogs).HasForeignKey(c => c.VisitorId).OnDelete(DeleteBehavior.SetNull); // FK_SessionLog_Visitor
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
