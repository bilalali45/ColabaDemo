// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // NoteDepartmentBinder
    
    public partial class NoteDepartmentBinderMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<NoteDepartmentBinder>
    {
        public void Configure(EntityTypeBuilder<NoteDepartmentBinder> builder)
        {
            builder.ToTable("NoteDepartmentBinder", "dbo");
            builder.HasKey(x => new { x.DepartmentId, x.NoteId });

            builder.Property(x => x.DepartmentId).HasColumnName(@"DepartmentId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.NoteId).HasColumnName(@"NoteId").HasColumnType("int").IsRequired().ValueGeneratedNever();

            // Foreign keys
            builder.HasOne(a => a.Department).WithMany(b => b.NoteDepartmentBinders).HasForeignKey(c => c.DepartmentId).OnDelete(DeleteBehavior.SetNull); // FK_NoteDepartmentBinder_Department
            builder.HasOne(a => a.Note).WithMany(b => b.NoteDepartmentBinders).HasForeignKey(c => c.NoteId).OnDelete(DeleteBehavior.SetNull); // FK_NoteDepartmentBinder_Note
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
