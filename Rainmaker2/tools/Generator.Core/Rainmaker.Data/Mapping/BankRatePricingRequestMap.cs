// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // BankRatePricingRequest
    
    public partial class BankRatePricingRequestMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<BankRatePricingRequest>
    {
        public void Configure(EntityTypeBuilder<BankRatePricingRequest> builder)
        {
            builder.ToTable("BankRatePricingRequest", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.BankRequestId).HasColumnName(@"BankRequestId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StartDateTimeUtc).HasColumnName(@"StartDateTimeUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EndDateTimeUtc).HasColumnName(@"EndDateTimeUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.PropertyValue).HasColumnName(@"PropertyValue").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.LoanAmount).HasColumnName(@"LoanAmount").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.StateId).HasColumnName(@"StateId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CountyId).HasColumnName(@"CountyId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LoanPurposeId).HasColumnName(@"LoanPurposeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PropertyUsageId).HasColumnName(@"PropertyUsageId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PropertyTypeId).HasColumnName(@"PropertyTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreditScoreId).HasColumnName(@"CreditScoreId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LoanLockPeriodId).HasColumnName(@"LoanLockPeriodId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductIds).HasColumnName(@"ProductIds").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.RequestXml).HasColumnName(@"RequestXml").HasColumnType("ntext").IsRequired(false);
            builder.Property(x => x.ResponseXml).HasColumnName(@"ResponseXml").HasColumnType("ntext").IsRequired(false);
            builder.Property(x => x.IsDone).HasColumnName(@"IsDone").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Error).HasColumnName(@"Error").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.NoOfTry).HasColumnName(@"NoOfTry").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
