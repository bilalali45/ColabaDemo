// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // BankRateParameter
    
    public partial class BankRateParameterMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<BankRateParameter>
    {
        public void Configure(EntityTypeBuilder<BankRateParameter> builder)
        {
            builder.ToTable("BankRateParameter", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            builder.Property(x => x.InstanceId).HasColumnName(@"InstanceId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PointId).HasColumnName(@"PointId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TierId).HasColumnName(@"TierId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ProductId).HasColumnName(@"ProductId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BankRateProductId).HasColumnName(@"BankRateProductId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MinLoan).HasColumnName(@"MinLoan").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.MaxLoan).HasColumnName(@"MaxLoan").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.PropertyValue).HasColumnName(@"PropertyValue").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.LoanAmount).HasColumnName(@"LoanAmount").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.StateId).HasColumnName(@"StateId").HasColumnType("int").IsRequired();
            builder.Property(x => x.CountyId).HasColumnName(@"CountyId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LoanPurposeId).HasColumnName(@"LoanPurposeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PropertyUsageId).HasColumnName(@"PropertyUsageId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PropertyTypeId).HasColumnName(@"PropertyTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreditScoreId).HasColumnName(@"CreditScoreId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LoanLockPeriodId).HasColumnName(@"LoanLockPeriodId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RequestXml).HasColumnName(@"RequestXml").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsDefault).HasColumnName(@"IsDefault").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsSystem).HasColumnName(@"IsSystem").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedOnUtc).HasColumnName(@"ModifiedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.BankRateInstance).WithMany(b => b.BankRateParameters).HasForeignKey(c => c.InstanceId).OnDelete(DeleteBehavior.SetNull); // FK_BankRateParameter_BankRateInstance
            builder.HasOne(a => a.BankRateProduct).WithMany(b => b.BankRateParameters).HasForeignKey(c => c.BankRateProductId).OnDelete(DeleteBehavior.SetNull); // FK_BankRateParameter_BankRateProduct
            builder.HasOne(a => a.BankRateTier).WithMany(b => b.BankRateParameters).HasForeignKey(c => c.TierId).OnDelete(DeleteBehavior.SetNull); // FK_BankRateParameter_BankRateTier
            builder.HasOne(a => a.LoanLockPeriod).WithMany(b => b.BankRateParameters).HasForeignKey(c => c.LoanLockPeriodId).OnDelete(DeleteBehavior.SetNull); // FK_BankRateParameter_LoanLockPeriod
            builder.HasOne(a => a.LoanPurpose).WithMany(b => b.BankRateParameters).HasForeignKey(c => c.LoanPurposeId).OnDelete(DeleteBehavior.SetNull); // FK_BankRateParameter_LoanPurpose
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
