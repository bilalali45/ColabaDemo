// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // CampaignQueue
    
    public partial class CampaignQueueMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<CampaignQueue>
    {
        public void Configure(EntityTypeBuilder<CampaignQueue> builder)
        {
            builder.ToTable("CampaignQueue", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.CampaignId).HasColumnName(@"CampaignId").HasColumnType("int").IsRequired();
            builder.Property(x => x.EntityRefTypeId).HasColumnName(@"EntityRefTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.EntityRefId).HasColumnName(@"EntityRefId").HasColumnType("int").IsRequired();
            builder.Property(x => x.LoanRequestId).HasColumnName(@"LoanRequestId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QuoteResultId).HasColumnName(@"QuoteResultId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StatusId).HasColumnName(@"StatusId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WorkQueueFromId).HasColumnName(@"WorkQueueFromId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WorkQueueToId).HasColumnName(@"WorkQueueToId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FromUtc).HasColumnName(@"FromUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ToUtc).HasColumnName(@"ToUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.NoOfTries).HasColumnName(@"NoOfTries").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsCompleted).HasColumnName(@"IsCompleted").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CompletedOnUtc).HasColumnName(@"CompletedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ModifiedOnUtc).HasColumnName(@"ModifiedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Campaign).WithMany(b => b.CampaignQueues).HasForeignKey(c => c.CampaignId).OnDelete(DeleteBehavior.SetNull); // FK_CampaignQueue_Campaign
            builder.HasOne(a => a.LoanRequest).WithMany(b => b.CampaignQueues).HasForeignKey(c => c.LoanRequestId).OnDelete(DeleteBehavior.SetNull); // FK_CampaignQueue_LoanRequest
            builder.HasOne(a => a.QuoteResult).WithMany(b => b.CampaignQueues).HasForeignKey(c => c.QuoteResultId).OnDelete(DeleteBehavior.SetNull); // FK_CampaignQueue_QuoteResult
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
