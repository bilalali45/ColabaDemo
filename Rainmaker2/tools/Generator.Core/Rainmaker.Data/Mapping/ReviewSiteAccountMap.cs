// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // ReviewSiteAccount
    
    public partial class ReviewSiteAccountMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<ReviewSiteAccount>
    {
        public void Configure(EntityTypeBuilder<ReviewSiteAccount> builder)
        {
            builder.ToTable("ReviewSiteAccount", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ReviewSiteId).HasColumnName(@"ReviewSiteId").HasColumnType("int").IsRequired();
            builder.Property(x => x.ReviewContactId).HasColumnName(@"ReviewContactId").HasColumnType("int").IsRequired();
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PostedOnUtc).HasColumnName(@"PostedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedOnUtc).HasColumnName(@"ModifiedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.ReviewContact).WithMany(b => b.ReviewSiteAccounts).HasForeignKey(c => c.ReviewContactId).OnDelete(DeleteBehavior.SetNull); // FK_ReviewSiteAccount_ReviewContact
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
