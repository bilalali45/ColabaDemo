// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // Recording
    
    public partial class Vortex_RecordingMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<Vortex_Recording>
    {
        public void Configure(EntityTypeBuilder<Vortex_Recording> builder)
        {
            builder.ToTable("Recording", "Vortex");
            builder.HasKey(x => x.Sid);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.AccountSid).HasColumnName(@"AccountSid").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            builder.Property(x => x.ApiVersion).HasColumnName(@"ApiVersion").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CallSid).HasColumnName(@"CallSid").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            builder.Property(x => x.ConferenceSid).HasColumnName(@"ConferenceSid").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DateCreatedUtc).HasColumnName(@"DateCreatedUtc").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.DateUpdatedUtc).HasColumnName(@"DateUpdatedUtc").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.StartTimeUtc).HasColumnName(@"StartTimeUtc").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.Duration).HasColumnName(@"Duration").HasColumnType("int").IsRequired();
            builder.Property(x => x.Sid).HasColumnName(@"Sid").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.Price).HasColumnName(@"Price").HasColumnType("decimal(9,5)").IsRequired(false);
            builder.Property(x => x.PriceUnit).HasColumnName(@"PriceUnit").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Channels).HasColumnName(@"Channels").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Source).HasColumnName(@"Source").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            builder.Property(x => x.ErrorCode).HasColumnName(@"ErrorCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Uri).HasColumnName(@"Uri").HasColumnType("nvarchar").IsRequired().HasMaxLength(2048);
            builder.Property(x => x.EncryptionDetails).HasColumnName(@"EncryptionDetails").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.SubresourceUrisAddOnResults).HasColumnName(@"SubresourceUrisAddOnResults").HasColumnType("nvarchar").IsRequired().HasMaxLength(2048);
            builder.Property(x => x.SubresourceUrisTranscriptions).HasColumnName(@"SubresourceUrisTranscriptions").HasColumnType("nvarchar").IsRequired().HasMaxLength(2048);
            builder.Property(x => x.RecordingFileDownloaded).HasColumnName(@"RecordingFileDownloaded").HasColumnType("bit").IsRequired();
            builder.Property(x => x.RecordingFileDownloadStatus).HasColumnName(@"RecordingFileDownloadStatus").HasColumnType("varchar").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.RecordingFileDownloadMessage).HasColumnName(@"RecordingFileDownloadMessage").HasColumnType("nvarchar(max)").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Vortex_CallLog).WithMany(b => b.Vortex_Recordings).HasForeignKey(c => c.CallSid).OnDelete(DeleteBehavior.SetNull); // FK_Recording_CallLog
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
