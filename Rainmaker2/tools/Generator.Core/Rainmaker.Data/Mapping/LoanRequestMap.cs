// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // LoanRequest
    
    public partial class LoanRequestMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<LoanRequest>
    {
        public void Configure(EntityTypeBuilder<LoanRequest> builder)
        {
            builder.ToTable("LoanRequest", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.VisitorId).HasColumnName(@"VisitorId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OpportunityId).HasColumnName(@"OpportunityId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeId).HasColumnName(@"EmployeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LoanPurposeId).HasColumnName(@"LoanPurposeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.LoanGoalId).HasColumnName(@"LoanGoalId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StateId).HasColumnName(@"StateId").HasColumnType("int").IsRequired();
            builder.Property(x => x.CountyId).HasColumnName(@"CountyId").HasColumnType("int").IsRequired();
            builder.Property(x => x.CityId).HasColumnName(@"CityId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CityName).HasColumnName(@"CityName").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.StreetAddress).HasColumnName(@"StreetAddress").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.ZipCode).HasColumnName(@"ZipCode").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.PropertyPurchaseYear).HasColumnName(@"PropertyPurchaseYear").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LoanAmount).HasColumnName(@"LoanAmount").HasColumnType("decimal(18,0)").IsRequired();
            builder.Property(x => x.PropertyValue).HasColumnName(@"PropertyValue").HasColumnType("decimal(18,0)").IsRequired();
            builder.Property(x => x.PropertyTypeId).HasColumnName(@"PropertyTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.PropertyUsageId).HasColumnName(@"PropertyUsageId").HasColumnType("int").IsRequired();
            builder.Property(x => x.CreditScoreNo).HasColumnName(@"CreditScoreNo").HasColumnType("int").IsRequired();
            builder.Property(x => x.LockPeriodDays).HasColumnName(@"LockPeriodDays").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsNewlyBuiltHome).HasColumnName(@"IsNewlyBuiltHome").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.EscrowWaiver).HasColumnName(@"EscrowWaiver").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsSecondLien).HasColumnName(@"IsSecondLien").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CashOutAmount).HasColumnName(@"CashOutAmount").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.FirstMortgageBalance).HasColumnName(@"FirstMortgageBalance").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.TotalJuniorLien).HasColumnName(@"TotalJuniorLien").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.MortgageToBePaid).HasColumnName(@"MortgageToBePaid").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.MortgageToBeSubordinate).HasColumnName(@"MortgageToBeSubordinate").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.SecondLienBalance).HasColumnName(@"SecondLienBalance").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.ResidencyTypeId).HasColumnName(@"ResidencyTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OwnRentalProperties).HasColumnName(@"OwnRentalProperties").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DtiHousing).HasColumnName(@"DtiHousing").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DtiTotal).HasColumnName(@"DtiTotal").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ResidualIncome).HasColumnName(@"ResidualIncome").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.TotalAssets).HasColumnName(@"TotalAssets").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.AnnualIncome).HasColumnName(@"AnnualIncome").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.MonthlyDebts).HasColumnName(@"MonthlyDebts").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.DocTypeId).HasColumnName(@"DocTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SearchDateUtc).HasColumnName(@"SearchDateUtc").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.SessionLogId).HasColumnName(@"SessionLogId").HasColumnType("int").IsRequired();
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsValid).HasColumnName(@"IsValid").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.LeadSourceId).HasColumnName(@"LeadSourceId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LeadSourceTypeId).HasColumnName(@"LeadSourceTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LeadCreatedFromId).HasColumnName(@"LeadCreatedFromId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AdSourceId).HasColumnName(@"AdSourceId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BusinessUnitId).HasColumnName(@"BusinessUnitId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsEligible).HasColumnName(@"IsEligible").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.FinancedFeePaid).HasColumnName(@"FinancedFeePaid").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedOnUtc).HasColumnName(@"ModifiedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EstimatedClosingDate).HasColumnName(@"EstimatedClosingDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TypeId).HasColumnName(@"TypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LeadTypeId).HasColumnName(@"LeadTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Deposit).HasColumnName(@"Deposit").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.FirstMortgageRate).HasColumnName(@"FirstMortgageRate").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.FirstMortgageLoanTypeId).HasColumnName(@"FirstMortgageLoanTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FirstMortgageAmortizationTypeId).HasColumnName(@"FirstMortgageAmortizationTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FirstMortgageLoanTermsYears).HasColumnName(@"FirstMortgageLoanTermsYears").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CopyFromId).HasColumnName(@"CopyFromId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MoveToId).HasColumnName(@"MoveToId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AdsSource).WithMany(b => b.LoanRequests).HasForeignKey(c => c.AdSourceId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_AdsSource
            builder.HasOne(a => a.BusinessUnit).WithMany(b => b.LoanRequests).HasForeignKey(c => c.BusinessUnitId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_BusinessUnit
            builder.HasOne(a => a.City).WithMany(b => b.LoanRequests).HasForeignKey(c => c.CityId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_City
            builder.HasOne(a => a.County).WithMany(b => b.LoanRequests).HasForeignKey(c => c.CountyId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_County
            builder.HasOne(a => a.Customer).WithMany(b => b.LoanRequests).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_Customer
            builder.HasOne(a => a.Employee).WithMany(b => b.LoanRequests).HasForeignKey(c => c.EmployeId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_Employee
            builder.HasOne(a => a.LeadSource).WithMany(b => b.LoanRequests).HasForeignKey(c => c.LeadSourceId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_LeadSource
            builder.HasOne(a => a.LeadSourceType).WithMany(b => b.LoanRequests).HasForeignKey(c => c.LeadSourceTypeId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_LeadSourceType
            builder.HasOne(a => a.LeadType).WithMany(b => b.LoanRequests).HasForeignKey(c => c.LeadTypeId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_LeadType
            builder.HasOne(a => a.LoanDocType).WithMany(b => b.LoanRequests).HasForeignKey(c => c.DocTypeId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_LoanDocType
            builder.HasOne(a => a.LoanGoal).WithMany(b => b.LoanRequests).HasForeignKey(c => c.LoanGoalId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_LoanGoal
            builder.HasOne(a => a.LoanPurpose).WithMany(b => b.LoanRequests).HasForeignKey(c => c.LoanPurposeId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_LoanPurpose
            builder.HasOne(a => a.LoanType).WithMany(b => b.LoanRequests).HasForeignKey(c => c.FirstMortgageLoanTypeId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_LoanType
            builder.HasOne(a => a.ProductAmortizationType).WithMany(b => b.LoanRequests).HasForeignKey(c => c.FirstMortgageAmortizationTypeId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_ProductAmortizationType
            builder.HasOne(a => a.PropertyType).WithMany(b => b.LoanRequests).HasForeignKey(c => c.PropertyTypeId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_PropertyType
            builder.HasOne(a => a.PropertyUsage).WithMany(b => b.LoanRequests).HasForeignKey(c => c.PropertyUsageId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_PropertyUsage
            builder.HasOne(a => a.ResidencyType).WithMany(b => b.LoanRequests).HasForeignKey(c => c.ResidencyTypeId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_ResidencyType
            builder.HasOne(a => a.State).WithMany(b => b.LoanRequests).HasForeignKey(c => c.StateId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_State
            builder.HasOne(a => a.Visitor).WithMany(b => b.LoanRequests).HasForeignKey(c => c.VisitorId).OnDelete(DeleteBehavior.SetNull); // FK_LoanRequest_Visitor
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
