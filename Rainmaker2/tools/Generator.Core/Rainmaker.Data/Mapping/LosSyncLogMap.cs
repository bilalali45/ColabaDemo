// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // LosSyncLog
    
    public partial class LosSyncLogMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<LosSyncLog>
    {
        public void Configure(EntityTypeBuilder<LosSyncLog> builder)
        {
            builder.ToTable("LosSyncLog", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.LosId).HasColumnName(@"LosId").HasColumnType("int").IsRequired();
            builder.Property(x => x.LoanApplicationId).HasColumnName(@"LoanApplicationId").HasColumnType("int").IsRequired();
            builder.Property(x => x.StatusId).HasColumnName(@"StatusId").HasColumnType("int").IsRequired();
            builder.Property(x => x.Message).HasColumnName(@"Message").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.IsAuto).HasColumnName(@"IsAuto").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CreatedById).HasColumnName(@"CreatedById").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Lo).WithMany(b => b.LosSyncLogs).HasForeignKey(c => c.LosId).OnDelete(DeleteBehavior.SetNull); // FK_LosSyncLog_Los
            builder.HasOne(a => a.LoanApplication).WithMany(b => b.LosSyncLogs).HasForeignKey(c => c.LoanApplicationId).OnDelete(DeleteBehavior.SetNull); // FK_LosSyncLog_LoanApplication
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
