// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // RangeSetDetail
    
    public partial class RangeSetDetailMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<RangeSetDetail>
    {
        public void Configure(EntityTypeBuilder<RangeSetDetail> builder)
        {
            builder.ToTable("RangeSetDetail", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.RangeSetId).HasColumnName(@"RangeSetId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RangeFrom).HasColumnName(@"RangeFrom").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.RangeTo).HasColumnName(@"RangeTo").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.FixedValue).HasColumnName(@"FixedValue").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.Percentage).HasColumnName(@"Percentage").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.FormulaId).HasColumnName(@"FormulaId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Formula).WithMany(b => b.RangeSetDetails).HasForeignKey(c => c.FormulaId).OnDelete(DeleteBehavior.SetNull); // FK_RangeSetDetail_Formula
            builder.HasOne(a => a.RangeSet).WithMany(b => b.RangeSetDetails).HasForeignKey(c => c.RangeSetId); // FK_RangeSetDetail_RangeSet
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
