// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // BenchMarkRate
    
    public partial class BenchMarkRateMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<BenchMarkRate>
    {
        public void Configure(EntityTypeBuilder<BenchMarkRate> builder)
        {
            builder.ToTable("BenchMarkRate", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.YieldRate).HasColumnName(@"YieldRate").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.PriceDateUtc).HasColumnName(@"PriceDateUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.MinPrice).HasColumnName(@"MinPrice").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.MaxPrice).HasColumnName(@"MaxPrice").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Threshold).HasColumnName(@"Threshold").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.HasWithProfit).HasColumnName(@"HasWithProfit").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedOnUtc).HasColumnName(@"ModifiedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.LoanRequestId).HasColumnName(@"LoanRequestId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QuoteResultId).HasColumnName(@"QuoteResultId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BusinessUnitId).HasColumnName(@"BusinessUnitId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BenchMarkId).HasColumnName(@"BenchMarkId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.BenchMark).WithMany(b => b.BenchMarkRates).HasForeignKey(c => c.BenchMarkId).OnDelete(DeleteBehavior.SetNull); // FK_BenchMarkRate_BenchMark
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
