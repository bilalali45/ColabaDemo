// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // RateArchive
    
    public partial class RateArchiveMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<RateArchive>
    {
        public void Configure(EntityTypeBuilder<RateArchive> builder)
        {
            builder.ToTable("RateArchive", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ProductId).HasColumnName(@"ProductId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RateTypeId).HasColumnName(@"RateTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PriceDateUtc).HasColumnName(@"PriceDateUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InvestorId).HasColumnName(@"InvestorId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WholesalePrice).HasColumnName(@"WholesalePrice").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.WholesaleRate).HasColumnName(@"WholesaleRate").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Price).HasColumnName(@"Price").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Rate).HasColumnName(@"Rate").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.Apr).HasColumnName(@"Apr").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.LenderFees).HasColumnName(@"LenderFees").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.DiscountCharges).HasColumnName(@"DiscountCharges").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.ClosingCost).HasColumnName(@"ClosingCost").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.Mi).HasColumnName(@"Mi").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.Piti).HasColumnName(@"Piti").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedOnUtc).HasColumnName(@"ModifiedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.LoanRequestId).HasColumnName(@"LoanRequestId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QuoteResultId).HasColumnName(@"QuoteResultId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BusinessUnitId).HasColumnName(@"BusinessUnitId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RateParameterId).HasColumnName(@"RateParameterId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.BusinessUnit).WithMany(b => b.RateArchives).HasForeignKey(c => c.BusinessUnitId).OnDelete(DeleteBehavior.SetNull); // FK_RateArchive_BusinessUnit
            builder.HasOne(a => a.Investor).WithMany(b => b.RateArchives).HasForeignKey(c => c.InvestorId).OnDelete(DeleteBehavior.SetNull); // FK_RateArchive_Investor
            builder.HasOne(a => a.Product).WithMany(b => b.RateArchives).HasForeignKey(c => c.ProductId).OnDelete(DeleteBehavior.SetNull); // FK_RateArchive_Product
            builder.HasOne(a => a.RateServiceParameter).WithMany(b => b.RateArchives).HasForeignKey(c => c.RateParameterId).OnDelete(DeleteBehavior.SetNull); // FK_RateArchive_RateServiceParameter
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
