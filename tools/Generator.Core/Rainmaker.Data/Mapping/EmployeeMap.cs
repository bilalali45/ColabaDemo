// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // Employee
    
    public partial class EmployeeMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<Employee>
    {
        public void Configure(EntityTypeBuilder<Employee> builder)
        {
            builder.ToTable("Employee", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ContactId).HasColumnName(@"ContactId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsSystem).HasColumnName(@"IsSystem").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedOnUtc).HasColumnName(@"ModifiedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TpId).HasColumnName(@"TpId").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.BranchId).HasColumnName(@"BranchId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NmlsNo).HasColumnName(@"NmlsNo").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.MaxLeadQuota).HasColumnName(@"MaxLeadQuota").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PerDayLeadQuota).HasColumnName(@"PerDayLeadQuota").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AutoLeadReassignMins).HasColumnName(@"AutoLeadReassignMins").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AutoLeadAssignAllowed).HasColumnName(@"AutoLeadAssignAllowed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.AutoLeadReassignAllowed).HasColumnName(@"AutoLeadReassignAllowed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.EmailAccountId).HasColumnName(@"EmailAccountId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PhoneInfoId).HasColumnName(@"PhoneInfoId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PhoneExtensionNo).HasColumnName(@"PhoneExtensionNo").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CheckPerformanceBeforeAssigningLead).HasColumnName(@"CheckPerformanceBeforeAssigningLead").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CheckLoginBeforeAssigningLead).HasColumnName(@"CheckLoginBeforeAssigningLead").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.CheckStateLicenseBeforeAssigningLead).HasColumnName(@"CheckStateLicenseBeforeAssigningLead").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.LeadAssignmentPriority).HasColumnName(@"LeadAssignmentPriority").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.HireDateUtc).HasColumnName(@"HireDateUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.LeaveDateUtc).HasColumnName(@"LeaveDateUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ScheduleUrl).HasColumnName(@"ScheduleUrl").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.LoanUrl).HasColumnName(@"LoanUrl").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.LoanLoginUrl).HasColumnName(@"LoanLoginUrl").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.Photo).HasColumnName(@"Photo").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.Profile).HasColumnName(@"Profile").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.CmsName).HasColumnName(@"CmsName").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.Branch).WithMany(b => b.Employees).HasForeignKey(c => c.BranchId).OnDelete(DeleteBehavior.SetNull); // FK_Employee_Branch
            builder.HasOne(a => a.Contact).WithMany(b => b.Employees).HasForeignKey(c => c.ContactId); // FK_Employee_Contact
            builder.HasOne(a => a.EmailAccount).WithMany(b => b.Employees).HasForeignKey(c => c.EmailAccountId).OnDelete(DeleteBehavior.SetNull); // FK_Employee_EmailAccount
            builder.HasOne(a => a.EntityType).WithMany(b => b.Employees).HasForeignKey(c => c.EntityTypeId).OnDelete(DeleteBehavior.SetNull); // FK_Employee_EntityType
            builder.HasOne(a => a.UserProfile).WithMany(b => b.Employees).HasForeignKey(c => c.UserId).OnDelete(DeleteBehavior.SetNull); // FK_Employee_UserProfile
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
