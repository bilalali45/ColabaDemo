// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // EmailLog
    
    public partial class EmailLogMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<EmailLog>
    {
        public void Configure(EntityTypeBuilder<EmailLog> builder)
        {
            builder.ToTable("EmailLog", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.DomainUrl).HasColumnName(@"DomainUrl").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.EmailKey).HasColumnName(@"EmailKey").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            builder.Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("nvarchar").IsRequired().HasMaxLength(200);
            builder.Property(x => x.FromAddress).HasColumnName(@"FromAddress").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ToAddress).HasColumnName(@"ToAddress").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.CcAddress).HasColumnName(@"CcAddress").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.BccAddress).HasColumnName(@"BccAddress").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.FilePath).HasColumnName(@"FilePath").HasColumnType("nvarchar(max)").IsRequired();
            builder.Property(x => x.ExpireDateUtc).HasColumnName(@"ExpireDateUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.SmtpServer).HasColumnName(@"SmtpServer").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(200);
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.WorkQueueId).HasColumnName(@"WorkQueueId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.WorkQueue).WithMany(b => b.EmailLogs).HasForeignKey(c => c.WorkQueueId).OnDelete(DeleteBehavior.SetNull); // FK_EmailLog_WorkQueue
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
