// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // OpportunityFeePaidBy
    
    public partial class OpportunityFeePaidByMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<OpportunityFeePaidBy>
    {
        public void Configure(EntityTypeBuilder<OpportunityFeePaidBy> builder)
        {
            builder.ToTable("OpportunityFeePaidBy", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.PaidById).HasColumnName(@"PaidById").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedOnUtc).HasColumnName(@"ModifiedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.OpportunityFeeId).HasColumnName(@"OpportunityFeeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PaymentPercent).HasColumnName(@"PaymentPercent").HasColumnType("decimal(18,2)").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.OpportunityFee).WithMany(b => b.OpportunityFeePaidBies).HasForeignKey(c => c.OpportunityFeeId).OnDelete(DeleteBehavior.SetNull); // FK_OpportunityFeePaidBy_OpportunityFee
            builder.HasOne(a => a.PaidBy).WithMany(b => b.OpportunityFeePaidBies).HasForeignKey(c => c.PaidById).OnDelete(DeleteBehavior.SetNull); // FK_OpportunityFeePaidBy_PaidBy
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
