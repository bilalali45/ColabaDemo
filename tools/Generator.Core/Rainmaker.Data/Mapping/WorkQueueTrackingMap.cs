// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // WorkQueueTracking
    
    public partial class WorkQueueTrackingMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<WorkQueueTracking>
    {
        public void Configure(EntityTypeBuilder<WorkQueueTracking> builder)
        {
            builder.ToTable("WorkQueueTracking", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.WorkQueueId).HasColumnName(@"WorkQueueId").HasColumnType("int").IsRequired();
            builder.Property(x => x.TrackingOnUtc).HasColumnName(@"TrackingOnUtc").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.QueueStatusId).HasColumnName(@"QueueStatusId").HasColumnType("int").IsRequired();
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.WorkQueue).WithMany(b => b.WorkQueueTrackings).HasForeignKey(c => c.WorkQueueId).OnDelete(DeleteBehavior.SetNull); // FK_WorkQueueTracking_WorkQueue
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
