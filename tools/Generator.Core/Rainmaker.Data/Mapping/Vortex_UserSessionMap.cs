// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // UserSession
    
    public partial class Vortex_UserSessionMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<Vortex_UserSession>
    {
        public void Configure(EntityTypeBuilder<Vortex_UserSession> builder)
        {
            builder.ToTable("UserSession", "Vortex");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.SessionId).HasColumnName(@"SessionId").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.UserAgent).HasColumnName(@"UserAgent").HasColumnType("nvarchar(max)").IsRequired();
            builder.Property(x => x.UserProfileId).HasColumnName(@"UserProfileId").HasColumnType("int").IsRequired();
            builder.Property(x => x.TypeId).HasColumnName(@"TypeId").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.CompanyPhoneInfoId).HasColumnName(@"CompanyPhoneInfoId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.CompanyPhoneInfo).WithMany(b => b.Vortex_UserSessions).HasForeignKey(c => c.CompanyPhoneInfoId).OnDelete(DeleteBehavior.SetNull); // FK_UserSession_CompanyPhoneInfo_Id
            builder.HasOne(a => a.UserProfile).WithMany(b => b.Vortex_UserSessions).HasForeignKey(c => c.UserProfileId).OnDelete(DeleteBehavior.SetNull); // FK_UserSession_UserProfile_Id
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
