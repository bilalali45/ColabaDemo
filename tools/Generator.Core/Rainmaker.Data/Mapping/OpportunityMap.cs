// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // Opportunity
    
    public partial class OpportunityMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<Opportunity>
    {
        public void Configure(EntityTypeBuilder<Opportunity> builder)
        {
            builder.ToTable("Opportunity", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedOnUtc).HasColumnName(@"ModifiedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EntityTypeId).HasColumnName(@"EntityTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            builder.Property(x => x.StatusId).HasColumnName(@"StatusId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsValid).HasColumnName(@"IsValid").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.LeadSourceId).HasColumnName(@"LeadSourceId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LeadSourceTypeId).HasColumnName(@"LeadSourceTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LeadTypeId).HasColumnName(@"LeadTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LeadSourceOriginalId).HasColumnName(@"LeadSourceOriginalId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LeadCreatedFromId).HasColumnName(@"LeadCreatedFromId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReferUrl).HasColumnName(@"ReferUrl").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.StatusCauseId).HasColumnName(@"StatusCauseId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OwnerId).HasColumnName(@"OwnerId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TeamId).HasColumnName(@"TeamId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NoRuleMatched).HasColumnName(@"NoRuleMatched").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AssignmentFlagId).HasColumnName(@"AssignmentFlagId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsAutoAssigned).HasColumnName(@"IsAutoAssigned").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsPickedByOwner).HasColumnName(@"IsPickedByOwner").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AssignedOnUtc).HasColumnName(@"AssignedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.AssignmentHopCount).HasColumnName(@"AssignmentHopCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BranchId).HasColumnName(@"BranchId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OriginalBusinessUnitId).HasColumnName(@"OriginalBusinessUnitId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BusinessUnitId).HasColumnName(@"BusinessUnitId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerMessage).HasColumnName(@"CustomerMessage").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.AdSourceId).HasColumnName(@"AdSourceId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LoanRequestId).HasColumnName(@"LoanRequestId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EstimatedClosingDate).HasColumnName(@"EstimatedClosingDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.PickedOnUtc).HasColumnName(@"PickedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.FinancedFeePaid).HasColumnName(@"FinancedFeePaid").HasColumnType("decimal(18,0)").IsRequired(false);
            builder.Property(x => x.LockStatusId).HasColumnName(@"LockStatusId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LockCauseId).HasColumnName(@"LockCauseId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsDuplicate).HasColumnName(@"IsDuplicate").HasColumnType("bit").IsRequired();
            builder.Property(x => x.DuplicateOfId).HasColumnName(@"DuplicateOfId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CopyFromId).HasColumnName(@"CopyFromId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MoveToId).HasColumnName(@"MoveToId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TpId).HasColumnName(@"TpId").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LeadCreatedOnUtc).HasColumnName(@"LeadCreatedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.MaxHopCount).HasColumnName(@"MaxHopCount").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AdsSource).WithMany(b => b.Opportunities).HasForeignKey(c => c.AdSourceId).OnDelete(DeleteBehavior.SetNull); // FK_Opportunity_AdsSource
            builder.HasOne(a => a.Branch).WithMany(b => b.Opportunities).HasForeignKey(c => c.BranchId).OnDelete(DeleteBehavior.SetNull); // FK_Opportunity_Branch
            builder.HasOne(a => a.BusinessUnit).WithMany(b => b.Opportunities).HasForeignKey(c => c.BusinessUnitId).OnDelete(DeleteBehavior.SetNull); // FK_Opportunity_BusinessUnit
            builder.HasOne(a => a.Employee).WithMany(b => b.Opportunities).HasForeignKey(c => c.OwnerId).OnDelete(DeleteBehavior.SetNull); // FK_Opportunity_Employee
            builder.HasOne(a => a.LeadSource_LeadSourceId).WithMany(b => b.Opportunities_LeadSourceId).HasForeignKey(c => c.LeadSourceId).OnDelete(DeleteBehavior.SetNull); // FK_Opportunity_LeadSource
            builder.HasOne(a => a.LeadSourceOriginal).WithMany(b => b.Opportunities_LeadSourceOriginalId).HasForeignKey(c => c.LeadSourceOriginalId).OnDelete(DeleteBehavior.SetNull); // FK_Opportunity_OriginalLeadSource
            builder.HasOne(a => a.LeadSourceType).WithMany(b => b.Opportunities).HasForeignKey(c => c.LeadSourceTypeId).OnDelete(DeleteBehavior.SetNull); // FK_Opportunity_LeadSourceType
            builder.HasOne(a => a.LeadType).WithMany(b => b.Opportunities).HasForeignKey(c => c.LeadTypeId).OnDelete(DeleteBehavior.SetNull); // FK_Opportunity_LeadType
            builder.HasOne(a => a.LoanRequest).WithMany(b => b.Opportunities).HasForeignKey(c => c.LoanRequestId).OnDelete(DeleteBehavior.SetNull); // FK_Opportunity_LoanRequest
            builder.HasOne(a => a.LockStatusCause).WithMany(b => b.Opportunities).HasForeignKey(c => c.LockCauseId).OnDelete(DeleteBehavior.SetNull); // FK_Opportunity_LockStatusCause
            builder.HasOne(a => a.LockStatusList).WithMany(b => b.Opportunities).HasForeignKey(c => c.LockStatusId).OnDelete(DeleteBehavior.SetNull); // FK_Opportunity_LockStatusList
            builder.HasOne(a => a.StatusCause).WithMany(b => b.Opportunities).HasForeignKey(c => c.StatusCauseId).OnDelete(DeleteBehavior.SetNull); // FK_Opportunity_StatusCause
            builder.HasOne(a => a.StatusList).WithMany(b => b.Opportunities).HasForeignKey(c => c.StatusId).OnDelete(DeleteBehavior.SetNull); // FK_Opportunity_StatusList
            builder.HasOne(a => a.Team).WithMany(b => b.Opportunities).HasForeignKey(c => c.TeamId).OnDelete(DeleteBehavior.SetNull); // FK_Opportunity_Team
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
