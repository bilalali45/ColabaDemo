// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // LoanApplicationFee
    
    public partial class LoanApplicationFeeMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<LoanApplicationFee>
    {
        public void Configure(EntityTypeBuilder<LoanApplicationFee> builder)
        {
            builder.ToTable("LoanApplicationFee", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(150);
            builder.Property(x => x.LoanApplicationId).HasColumnName(@"LoanApplicationId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FeeId).HasColumnName(@"FeeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FeeDetailId).HasColumnName(@"FeeDetailId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OpportunityFeeId).HasColumnName(@"OpportunityFeeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsCredit).HasColumnName(@"IsCredit").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Value).HasColumnName(@"Value").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.CreditedById).HasColumnName(@"CreditedById").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PaidById).HasColumnName(@"PaidById").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PaidBeforeClosing).HasColumnName(@"PaidBeforeClosing").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.PaidAtClosing).HasColumnName(@"PaidAtClosing").HasColumnType("decimal(18,2)").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Fee).WithMany(b => b.LoanApplicationFees).HasForeignKey(c => c.FeeId).OnDelete(DeleteBehavior.SetNull); // FK_LoanApplicationFee_Fee
            builder.HasOne(a => a.FeeDetail).WithMany(b => b.LoanApplicationFees).HasForeignKey(c => c.FeeDetailId).OnDelete(DeleteBehavior.SetNull); // FK_LoanApplicationFee_FeeDetail
            builder.HasOne(a => a.LoanApplication).WithMany(b => b.LoanApplicationFees).HasForeignKey(c => c.LoanApplicationId).OnDelete(DeleteBehavior.SetNull); // FK_LoanApplicationFee_LoanApplication
            builder.HasOne(a => a.OpportunityFee).WithMany(b => b.LoanApplicationFees).HasForeignKey(c => c.OpportunityFeeId).OnDelete(DeleteBehavior.SetNull); // FK_LoanApplicationFee_OpportunityFee
            builder.HasOne(a => a.PaidBy).WithMany(b => b.LoanApplicationFees).HasForeignKey(c => c.PaidById).OnDelete(DeleteBehavior.SetNull); // FK_LoanApplicationFee_PaidBy
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
