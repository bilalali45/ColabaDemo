// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2.1
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RainMaker.Data.Mapping
{
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using RainMaker.Entity.Models;

    // AuthApplicationKey
    
    public partial class AuthApplicationKeyMap : Microsoft.EntityFrameworkCore.IEntityTypeConfiguration<AuthApplicationKey>
    {
        public void Configure(EntityTypeBuilder<AuthApplicationKey> builder)
        {
            builder.ToTable("AuthApplicationKey", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.BusinessUnitId).HasColumnName(@"BusinessUnitId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AuthProviderId).HasColumnName(@"AuthProviderId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AppId).HasColumnName(@"AppId").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.AppSecret).HasColumnName(@"AppSecret").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.RedirectUri).HasColumnName(@"RedirectUri").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.LoginPageUrl).HasColumnName(@"LoginPageUrl").HasColumnType("nvarchar").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.TokenExpiryTime).HasColumnName(@"TokenExpiryTime").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsSystem).HasColumnName(@"IsSystem").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ModifiedOnUtc).HasColumnName(@"ModifiedOnUtc").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CreatedOnUtc).HasColumnName(@"CreatedOnUtc").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.AuthProvider).WithMany(b => b.AuthApplicationKeys).HasForeignKey(c => c.AuthProviderId).OnDelete(DeleteBehavior.SetNull); // FK_AuthApplicationKey_AuthProvider
            builder.HasOne(a => a.BusinessUnit).WithMany(b => b.AuthApplicationKeys).HasForeignKey(c => c.BusinessUnitId).OnDelete(DeleteBehavior.SetNull); // FK_AuthApplicationKey_BusinessUnit
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
